Index: app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.singularity.ipcaplus.chat\r\n\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.isVisible\r\nimport androidx.recyclerview.widget.DefaultItemAnimator\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.Query\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.drawer.CalendarActivity\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.getMetaOx\r\nimport com.singularity.ipcaplus.databinding.ActivityChatBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.utils.Backend.createJsonArrayString\r\nimport kotlinx.coroutines.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\nimport java.io.BufferedOutputStream\r\nimport java.io.BufferedWriter\r\nimport java.io.OutputStream\r\nimport java.io.OutputStreamWriter\r\nimport java.net.URL\r\nimport java.time.LocalDateTime\r\nimport java.time.format.DateTimeFormatter\r\nimport javax.net.ssl.HttpsURLConnection\r\n\r\nclass ChatActivity : AppCompatActivity() {\r\n\r\n    var messages = arrayListOf<Message>()\r\n    var currentUserIsAdmin = false\r\n    private lateinit var binding: ActivityChatBinding\r\n    private lateinit var chat_id : String\r\n    var tokens_adress = arrayListOf<String>()\r\n    var chat_user_uids = arrayListOf<String>()\r\n    private var mAdapter: RecyclerView.Adapter<*>? = null\r\n    private var mLayoutManager: LinearLayoutManager? = null\r\n\r\n    val db = Firebase.firestore\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_chat)\r\n\r\n        binding = ActivityChatBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        // Variables\r\n        chat_id = intent.getStringExtra(\"chat_id\").toString()\r\n        val current = LocalDateTime.now()\r\n\r\n        val formatter = DateTimeFormatter.BASIC_ISO_DATE\r\n        val formatted = current.format(formatter)\r\n\r\n        // Check if user is admin\r\n        Backend.getChatAdminIds(chat_id) {\r\n            val currentUser = Firebase.auth.currentUser!!.uid\r\n            for (admin in it) {\r\n                if (admin == currentUser)\r\n                    currentUserIsAdmin = true\r\n            }\r\n        }\r\n\r\n        // Get all members id of chat\r\n        Backend.getChatUsersUids(chat_id){\r\n            chat_user_uids.clear()\r\n            chat_user_uids.addAll(it)\r\n\r\n            for (userId in chat_user_uids){\r\n                // Getting all of tokens of  profile associated devices\r\n                Backend.getAllTokens(userId) {\r\n                    if (tokens_adress.isEmpty()){\r\n                        tokens_adress.clear()\r\n                    }\r\n                    tokens_adress.addAll(it)\r\n\r\n                    GlobalScope.launch {\r\n                        withContext(Dispatchers.IO){\r\n                            createNotificationGroup(\"otorrinolaringoloigista\", createJsonArrayString(tokens_adress))\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        println(\"Current Date is: $formatted\")\r\n\r\n        // Send Message\r\n        binding.fabSend.setOnClickListener {\r\n            if(!binding.editTextMessage.text.isNullOrBlank()) {\r\n                // get data of ecripted shared preferences (\"chatuid\" -> \"key\")\r\n                val keygen = getMetaOx(this, chat_id)\r\n                // Build encryptation data of message send by the user\r\n                var meta = encryptMeta( binding.editTextMessage.text.toString(), keygen.toString())\r\n\r\n                val message = Message(\r\n                    Firebase.auth.currentUser!!.uid,\r\n                    meta.toString(),\r\n                    Timestamp.now(),\r\n                    \"\"\r\n\r\n                )\r\n                db.collection(\"chat\").document(\"$chat_id\").collection(\"message\")\r\n                    .add(message.toHash())\r\n                    .addOnSuccessListener { documentReference ->\r\n\r\n                        GlobalScope.launch {\r\n                            withContext(Dispatchers.IO){\r\n                                //APA91bEKDInIYA242YofpahBmhB57pEI4gNT63DJJenWCccJGqeSYrWzj0BSruX49DhVp2vGSY5xJ2fEJk2vhtoraT3_bbjEKw4Nx3eJKj7tttVRPjQs0Uc_OPkrcj4twR70H5tAilnY\r\n                                sendNotificationToGroup( Firebase.auth.currentUser!!.uid, \"Depois temos de mudar\", \"APA91bHFEOWkBe0cf6ZBdBqDiZ1WzYf--PmimY3tWzDlhAPWZ3UL1eSCSuO7nVt5k3i-2FNg6U5d6NoR767JXg9W_NT9lo4u3kiuT46w79LXjcK63dXUzyzIZEzac9olNNb2_siLHA-K\")\r\n                            }\r\n                        }\r\n                        Log.d(TAG, \"DocumentSnapshot added with ID: ${documentReference.id}\")\r\n\r\n\r\n                    }\r\n                    .addOnFailureListener { e ->\r\n                        Log.w(TAG, \"Error adding document\", e)\r\n                    }\r\n                binding.editTextMessage.text.clear()\r\n\r\n            }\r\n        }\r\n\r\n        // Show Messages\r\n        db.collection(\"chat\").document(\"$chat_id\").collection(\"message\").orderBy(\"time\", Query.Direction.DESCENDING)\r\n            .addSnapshotListener { documents, e ->\r\n\r\n                documents?.let {\r\n                    messages.clear()\r\n                    for (document in it) {\r\n                        Log.d(TAG, \"${document.id} => ${document.data}\")\r\n                        val message = Message.fromHash(document)\r\n                        messages.add(message)\r\n\r\n                    }\r\n                    mAdapter?.notifyDataSetChanged()\r\n                }\r\n\r\n            }\r\n\r\n        // Recycler View Messages\r\n        mLayoutManager = LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)\r\n        binding.recycleViewChat.layoutManager = mLayoutManager\r\n        mAdapter = MessageAdapter()\r\n        binding.recycleViewChat.itemAnimator = DefaultItemAnimator()\r\n        binding.recycleViewChat.adapter = mAdapter\r\n\r\n        mLayoutManager!!.reverseLayout = true\r\n\r\n    }\r\n\r\n    /*\r\n       This function create the action bar above the activity\r\n    */\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val inflater: MenuInflater = menuInflater\r\n        inflater.inflate(R.menu.menu_chat, menu)\r\n\r\n        db.collection(\"chat\")\r\n            .addSnapshotListener { documents, e ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        if(document.id == chat_id) {\r\n                            val chat = Chat.fromHash(document)\r\n                            supportActionBar?.title = chat.name\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n        supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back_24)\r\n\r\n\r\n        return true\r\n    }\r\n\r\n\r\n    /*\r\n        This function define the events of the action bar buttons\r\n     */\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        super.onOptionsItemSelected(item)\r\n\r\n        when (item.itemId){\r\n            R.id.calendario -> {\r\n                val intent = Intent(this, CalendarActivity::class.java)\r\n                intent.putExtra(\"chat_id\", chat_id)\r\n                intent.putExtra(\"is_admin\", currentUserIsAdmin)\r\n                startActivity(intent)\r\n                return true\r\n            }\r\n            R.id.chatMore -> {\r\n                val intent = Intent(this, ChatMoreActivity::class.java)\r\n                intent.putExtra(\"chat_id\", chat_id)\r\n                println(\"3------------------------------ \" + currentUserIsAdmin)\r\n                intent.putExtra(\"is_admin\", currentUserIsAdmin)\r\n                intent.putExtra(\"chat_name\", supportActionBar?.title)\r\n                startActivity(intent)\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n\r\n    // When the support action bar back button is pressed, the app will go back to the previous activity\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        onBackPressed()\r\n        return true\r\n    }\r\n\r\n\r\n    inner class MessageAdapter : RecyclerView.Adapter<MessageAdapter.ViewHolder>() {\r\n\r\n        inner class ViewHolder(val v: View) : RecyclerView.ViewHolder(v)\r\n\r\n        var otherUser = false\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            if(viewType == 1) {\r\n                otherUser = false\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_message_self, parent, false))\r\n            } else if (viewType == 2){\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_message_system, parent, false))\r\n            } else {\r\n                otherUser = true\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_message_others, parent, false))\r\n            }\r\n\r\n        }\r\n\r\n        @RequiresApi(Build.VERSION_CODES.M)\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n\r\n\r\n            holder.v.apply {\r\n\r\n                val textViewMessage = findViewById<TextView>(R.id.textViewMessage)\r\n                val timeLastMessage = findViewById<TextView?>(R.id.timeLastMessage)\r\n\r\n\r\n                timeLastMessage?.isVisible = false\r\n                val keygen = getMetaOx(context, chat_id)\r\n                print( getMetaOx(context, chat_id)).toString()\r\n                val message_decripted = decryptWithAESmeta(keygen.toString(), messages[position].message)\r\n                textViewMessage.text = message_decripted\r\n                println(message_decripted)\r\n                if(position == messages.size - 1) {\r\n                    val data = Utilis.getDate(\r\n                        messages[position].time.seconds * 1000,\r\n                        \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\r\n                    )\r\n                    timeLastMessage.isVisible = true\r\n                    timeLastMessage.text = Utilis.getHours(data) + \":\" + Utilis.getMinutes(data)\r\n                }\r\n\r\n                if (otherUser) {\r\n                    val imageViewUser = findViewById<ImageView?>(R.id.imageViewUser)\r\n                    if (imageViewUser != null) {\r\n                        Utilis.getFile(context, \"profilePictures/${messages[position].user}.png\", \"png\") { bitmap ->\r\n                            imageViewUser.setImageBitmap(bitmap)\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        override fun getItemViewType(position: Int) : Int {\r\n            if (messages[position].user == Firebase.auth.currentUser!!.uid) {\r\n                return 1\r\n            } else if (messages[position].user == \"system\"){\r\n                return 2\r\n            } else {\r\n                return 0\r\n            }\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return messages.size\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private suspend fun  createNotificationGroup(notificationKeyName : String, registrationIds : JSONArray)  {\r\n\r\n        try {\r\n\r\n            Log.d(\"json\", registrationIds.toString())\r\n\r\n            //The url of the API i want to access (Firebase Cloud Messaging)\r\n            val endPoint = URL(\"https://fcm.googleapis.com/fcm/notification\")\r\n\r\n            //Establish a connection to fcm (Firebase Cloud Messaging) so i can send a push notification to a specific topic\r\n            val httpsURLConnection: HttpsURLConnection =\r\n                endPoint.openConnection() as HttpsURLConnection\r\n\r\n            //Here i configure the connection to fcm\r\n            //The time available to read from the input stream when the connection is established\r\n            httpsURLConnection.readTimeout = 10000\r\n            //The time available to connect to the url\r\n            httpsURLConnection.connectTimeout = 15000\r\n            //Defining the type of request to be made to the fcm\r\n            httpsURLConnection.requestMethod = \"POST\"\r\n            //Defining that the url connection can be used to send and receive data\r\n            httpsURLConnection.doInput = true\r\n            httpsURLConnection.doOutput = true\r\n\r\n            //Here i give my server key so i can make a request to fcm (Firebase Cloud Messaging) of my application (FirebaseDemo)\r\n            //and i define as well the type of content that i will be sending (json object)\r\n            httpsURLConnection.setRequestProperty(\"Content-Type\", \"application/json\")\r\n            val project_key = \"AAAAMMR-Gaw:APA91bFeijRa909_QEdEFsQeDSaJZRYD7rOk8B8Bc2QiYcGoyLG1xqqpZLkOJXmZrG0FbScojvqBCsweSEWDrMLM6kr67boS-BVB2oy7fL6Zn1N9ICVk6efGniauDa3z8eaOb1TENmEs\"\r\n            val senderId = \"209455028652\"\r\n            httpsURLConnection.setRequestProperty(\"authorization\", \"key=$project_key\")\r\n            httpsURLConnection.setRequestProperty(\"project_id\", senderId)\r\n\r\n            val json = JSONObject()\r\n\r\n            //Here i need to verify if the chat has already been created\r\n            //----------------------------------------------------------\r\n\r\n            //Here i define the name of the group \"chatName\" and\r\n            //the fcm tokens of the users that are going to be in the group \"registrationIds\"\r\n            json.put(\"operation\", \"create\")\r\n            // GROUP NAME\r\n            json.put(\"notification_key_name\", notificationKeyName)\r\n            // TOKENS OF FCM PROFILES LIST\r\n            json.put(\"registration_ids\", registrationIds)\r\n\r\n            //json.put(\"notification_key_name\", \"AM_7\")\r\n\r\n            val outputStream: OutputStream =\r\n                BufferedOutputStream(httpsURLConnection.outputStream)\r\n            val writer = BufferedWriter(OutputStreamWriter(outputStream, \"utf-8\"))\r\n\r\n            //here i write the body of the post request and then i send the request (flush)\r\n            //then i close the post request\r\n            writer.write(json.toString())\r\n            writer.flush()\r\n            writer.close()\r\n\r\n            outputStream.close()\r\n\r\n            //The response code and message of the post requests\r\n            val responseCode: Int = httpsURLConnection.responseCode\r\n            val responseMessage = httpsURLConnection.responseMessage\r\n\r\n            Log.d(TAG, \"$responseCode $responseMessage\")\r\n\r\n\r\n            // Check if the connection is successful\r\n            if (responseCode in 400..499) {\r\n                httpsURLConnection.errorStream\r\n            } else {\r\n                httpsURLConnection.inputStream\r\n            }\r\n\r\n            if (responseCode == 200) {\r\n                Log.e(TAG, \"Group Created!!\")\r\n\r\n                val response = httpsURLConnection.inputStream.bufferedReader()\r\n                    .use { it.readText() }  // defaults to UTF-8\r\n                withContext(Dispatchers.Main) {\r\n                    // Convert raw JSON to pretty JSON using GSON library\r\n\r\n                    //Here i get the notification_key that has been defined to the group that got created\r\n                    val jsonObject  = JSONObject(response)\r\n                    val notifKey = jsonObject.getString(\"notification_key\")\r\n                    println(\"NotifKey:\")\r\n                    println(notifKey)\r\n                }\r\n            } else {\r\n                Log.e(TAG, \"Error it didn´t work\")\r\n            }\r\n\r\n            //Here i close the connection to the endPoint\r\n            httpsURLConnection.disconnect()\r\n\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    //This function sends push notifications to devices that are subscribed to a specific topic\r\n    private suspend fun sendNotificationToGroup(title: String, message: String, notificationKey : String) {\r\n\r\n        delay(1500)\r\n\r\n        try {\r\n\r\n            //The url of the API i want to access (Firebase Cloud Messaging)\r\n            val url = URL(\"https://fcm.googleapis.com/fcm/send\")\r\n\r\n            //Establish a connection to fcm (Firebase Cloud Messaging) so i can send a push notification to a specific topic\r\n            val httpsURLConnection: HttpsURLConnection =\r\n                url.openConnection() as HttpsURLConnection\r\n\r\n            //Here i configure the connection to fcm\r\n            //The time available to read from the input stream when the connection is established\r\n            httpsURLConnection.readTimeout = 10000\r\n            //The time available to connect to the url\r\n            httpsURLConnection.connectTimeout = 15000\r\n            //Defining the type of request to be made to the fcm\r\n            httpsURLConnection.requestMethod = \"POST\"\r\n            //Defining that the url connection can be used to send and receive data\r\n            httpsURLConnection.doInput = true\r\n            httpsURLConnection.doOutput = true\r\n\r\n            //Here i give my server key so i can make a request to fcm (Firebase Cloud Messaging) of my application (FirebaseDemo)\r\n            //and i define as well the type of content that i will be sending (json)\r\n            val project_key = \"AAAAMMR-Gaw:APA91bFeijRa909_QEdEFsQeDSaJZRYD7rOk8B8Bc2QiYcGoyLG1xqqpZLkOJXmZrG0FbScojvqBCsweSEWDrMLM6kr67boS-BVB2oy7fL6Zn1N9ICVk6efGniauDa3z8eaOb1TENmEs\"\r\n            httpsURLConnection.setRequestProperty(\"authorization\", \"key=$project_key\")\r\n            httpsURLConnection.setRequestProperty(\"Content-Type\", \"application/json\")\r\n\r\n            val body = JSONObject()\r\n            val data = JSONObject()\r\n\r\n            data.put(\"title\", title)\r\n            data.put(\"content\", message)\r\n            //Here i define the Activity in witch i want the user to navigate when they click the notification\r\n            data.put(\"click_action\", \".LoginActivity\")\r\n            //data.put(\"chat_id\", \"S77po7vNGjtKja2Rinyb\")\r\n\r\n            //val condition = \"'$TOPIC1' in topics && '$TOPIC2' in topics && '$TOPIC3' in topics\"\r\n            //body.put(\"condition\", condition)\r\n\r\n            //here i define the body of the post request\r\n            body.put(\"data\", data)\r\n            //Here i define the group via notification key in which i want to send the notification/message\r\n            body.put(\"to\", notificationKey)\r\n\r\n            val outputStream: OutputStream =\r\n                BufferedOutputStream(httpsURLConnection.outputStream)\r\n            val writer = BufferedWriter(OutputStreamWriter(outputStream, \"utf-8\"))\r\n\r\n            //here i write the body of the post request and then i send the request\r\n            //then i close the post request\r\n            writer.write(body.toString())\r\n            writer.flush()\r\n            writer.close()\r\n\r\n            outputStream.close()\r\n\r\n            //The response code and message of the post requests\r\n            val responseCode: Int = httpsURLConnection.responseCode\r\n            val responseMessage: String = httpsURLConnection.responseMessage\r\n\r\n\r\n            Log.d(TAG, \"Response from sendMes: $responseCode $responseMessage\")\r\n\r\n\r\n            // Check if the connection is successful or not\r\n            if (responseCode in 400..499) {\r\n                httpsURLConnection.errorStream\r\n            } else {\r\n                httpsURLConnection.inputStream\r\n            }\r\n            if (responseCode == 200) {\r\n                Log.e(\r\n                    TAG,\r\n                    \"Notification Sent \\n Title: $title \\n Body: $message\"\r\n                )\r\n            } else {\r\n                Log.e(TAG, \"Notification Error\")\r\n            }\r\n\r\n            httpsURLConnection.disconnect()\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt b/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt
--- a/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt	(revision 61aecb98de8cc827aadb6472252112d5a0bddc54)
+++ b/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt	(date 1641776094519)
@@ -93,7 +93,7 @@
 
                     GlobalScope.launch {
                         withContext(Dispatchers.IO){
-                            createNotificationGroup("otorrinolaringoloigista", createJsonArrayString(tokens_adress))
+                            createNotificationGroup("anotherone1", createJsonArrayString(tokens_adress))
                         }
                     }
 
@@ -127,7 +127,7 @@
                         GlobalScope.launch {
                             withContext(Dispatchers.IO){
                                 //APA91bEKDInIYA242YofpahBmhB57pEI4gNT63DJJenWCccJGqeSYrWzj0BSruX49DhVp2vGSY5xJ2fEJk2vhtoraT3_bbjEKw4Nx3eJKj7tttVRPjQs0Uc_OPkrcj4twR70H5tAilnY
-                                sendNotificationToGroup( Firebase.auth.currentUser!!.uid, "Depois temos de mudar", "APA91bHFEOWkBe0cf6ZBdBqDiZ1WzYf--PmimY3tWzDlhAPWZ3UL1eSCSuO7nVt5k3i-2FNg6U5d6NoR767JXg9W_NT9lo4u3kiuT46w79LXjcK63dXUzyzIZEzac9olNNb2_siLHA-K")
+                                sendNotificationToGroup( Firebase.auth.currentUser!!.uid, "teste", "APA91bHozkJ0xzMA-iqreZpnMCE5MRlnbEd7Fl_lUMoGYkR_yRJg7ZQrRcmw_Q6mFAfAYqkm8zK_5I4K-u9r7AB_Yz5xyHD5oiOdWojnKYzTVLwp6ax_h3M")
                             }
                         }
                         Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
Index: app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.singularity.ipcaplus.cryptography\r\n\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport android.util.Log\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.security.crypto.EncryptedSharedPreferences\r\nimport androidx.security.crypto.MasterKeys\r\nimport com.google.gson.Gson\r\nimport com.google.gson.GsonBuilder\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider\r\nimport org.bouncycastle.util.encoders.Base64\r\nimport java.io.UnsupportedEncodingException\r\nimport java.security.InvalidKeyException\r\nimport java.security.NoSuchAlgorithmException\r\nimport java.security.Security\r\nimport java.util.Objects.hash\r\nimport javax.crypto.*\r\nimport javax.crypto.spec.SecretKeySpec\r\n\r\n\r\n\r\n\r\n\r\nfun encryptMeta(strToEncrypt: String, secret_key: String): String? {\r\n    Security.addProvider(BouncyCastleProvider())\r\n    hash(strToEncrypt)\r\n    var keyBytes: ByteArray\r\n\r\n    try {\r\n        keyBytes = secret_key.toByteArray(charset(\"UTF8\"))\r\n        val skey = SecretKeySpec(keyBytes, \"AES\")\r\n        val input = strToEncrypt.toByteArray(charset(\"UTF8\"))\r\n\r\n        synchronized(Cipher::class.java) {\r\n            val cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\")\r\n            cipher.init(Cipher.ENCRYPT_MODE, skey)\r\n\r\n            val cipherText = ByteArray(cipher.getOutputSize(input.size))\r\n            var ctLength = cipher.update(\r\n                input, 0, input.size,\r\n                cipherText, 0\r\n            )\r\n            ctLength += cipher.doFinal(cipherText, ctLength)\r\n            return String(\r\n                Base64.encode(cipherText)\r\n            )\r\n        }\r\n    } catch (uee: UnsupportedEncodingException) {\r\n        uee.printStackTrace()\r\n    } catch (ibse: IllegalBlockSizeException) {\r\n        ibse.printStackTrace()\r\n    } catch (bpe: BadPaddingException) {\r\n        bpe.printStackTrace()\r\n    } catch (ike: InvalidKeyException) {\r\n        ike.printStackTrace()\r\n    } catch (nspe: NoSuchPaddingException) {\r\n        nspe.printStackTrace()\r\n    } catch (nsae: NoSuchAlgorithmException) {\r\n        nsae.printStackTrace()\r\n    } catch (e: ShortBufferException) {\r\n        e.printStackTrace()\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nfun decryptWithAESmeta(key: String, strToDecrypt: String?): String? {\r\n    Security.addProvider(BouncyCastleProvider())\r\n    var keyBytes: ByteArray\r\n\r\n    try {\r\n        keyBytes = key.toByteArray(charset(\"UTF8\"))\r\n        val skey = SecretKeySpec(keyBytes, \"AES\")\r\n        val input = org.bouncycastle.util.encoders.Base64\r\n            .decode(strToDecrypt?.trim { it <= ' ' }?.toByteArray(charset(\"UTF8\")))\r\n\r\n        synchronized(Cipher::class.java) {\r\n            val cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\")\r\n            cipher.init(Cipher.DECRYPT_MODE, skey)\r\n\r\n            val plainText = ByteArray(cipher.getOutputSize(input.size))\r\n            var ptLength = cipher.update(input, 0, input.size, plainText, 0)\r\n            ptLength += cipher.doFinal(plainText, ptLength)\r\n            val decryptedString = String(plainText)\r\n            return decryptedString.trim { it <= ' ' }\r\n        }\r\n    } catch (uee: UnsupportedEncodingException) {\r\n        uee.printStackTrace()\r\n    } catch (ibse: IllegalBlockSizeException) {\r\n        ibse.printStackTrace()\r\n    } catch (bpe: BadPaddingException) {\r\n        bpe.printStackTrace()\r\n    } catch (ike: InvalidKeyException) {\r\n        ike.printStackTrace()\r\n    } catch (nspe: NoSuchPaddingException) {\r\n        nspe.printStackTrace()\r\n    } catch (nsae: NoSuchAlgorithmException) {\r\n        nsae.printStackTrace()\r\n    } catch (e: ShortBufferException) {\r\n        e.printStackTrace()\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nfun metaGenrateKey(): String {\r\n    //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n    val keygen = (\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n            + \"0123456789\"\r\n            + \"abcdefghijklmnopqrstuvxyz\")\r\n\r\n    val n = 32\r\n\r\n    // create StringBuffer size of keygen\r\n    val secretKey = StringBuilder(n)\r\n    for (i in 0 until n) {\r\n\r\n        // generate a random number between\r\n        // 0 to keygen variable length\r\n        val index = (keygen.length\r\n                * Math.random()).toInt()\r\n\r\n        // add Character one by one in end of secretKey\r\n        secretKey.append(keygen[index])\r\n\r\n    }\r\n    println(secretKey)\r\n    return secretKey.toString()\r\n}\r\n\r\nfun metaBlock(message: String){\r\n    //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n    val keygen = metaGenrateKey()\r\n\r\n    var meta = encryptMeta(message, keygen)\r\n    println(meta)\r\n\r\n    val message_decripted = decryptWithAESmeta(keygen, meta)\r\n    println(message_decripted)\r\n}\r\n\r\n@RequiresApi(Build.VERSION_CODES.M)\r\nfun saveKeygenOx(context : Context, chatUid : String, keygen: String){\r\n\r\n    val keyGenParameterSpec = MasterKeys.AES256_GCM_SPEC\r\n    val masterKeyAlias = MasterKeys.getOrCreate(keyGenParameterSpec)\r\n    val sharedPreferences = EncryptedSharedPreferences.create(\r\n        \"meta_shared_preferences\",\r\n        masterKeyAlias,\r\n        context,\r\n        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,\r\n        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM\r\n    )\r\n\r\n    // storing a value\r\n    sharedPreferences\r\n        .edit()\r\n        .putString(chatUid, keygen)\r\n        .apply()\r\n}\r\n\r\n@RequiresApi(Build.VERSION_CODES.M)\r\nfun getMetaOx(context: Context, chatUid: String): String? {\r\n\r\n    val keyGenParameterSpec = MasterKeys.AES256_GCM_SPEC\r\n    val masterKeyAlias = MasterKeys.getOrCreate(keyGenParameterSpec)\r\n    val sharedPreferences = EncryptedSharedPreferences.create(\r\n        \"meta_shared_preferences\",\r\n        masterKeyAlias,\r\n        context,\r\n        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,\r\n        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM\r\n    )\r\n\r\n    // reading a value\r\n    println(sharedPreferences.getString(chatUid, \"\"))\r\n    return sharedPreferences.getString(chatUid, \"\") // -> \"some_data\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt b/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt
--- a/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt	(revision 61aecb98de8cc827aadb6472252112d5a0bddc54)
+++ b/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt	(date 1641768812545)
@@ -13,9 +13,11 @@
 import java.io.UnsupportedEncodingException
 import java.security.InvalidKeyException
 import java.security.NoSuchAlgorithmException
+import java.security.SecureRandom
 import java.security.Security
 import java.util.Objects.hash
 import javax.crypto.*
+import javax.crypto.spec.IvParameterSpec
 import javax.crypto.spec.SecretKeySpec
 
 
@@ -26,6 +28,11 @@
     Security.addProvider(BouncyCastleProvider())
     hash(strToEncrypt)
     var keyBytes: ByteArray
+    //val initVector = generateRandomIV()
+    val initVector = "7c5afb00aaecb1a1"
+    val iv = IvParameterSpec(initVector.toByteArray(charset("UTF-8")))
+    println("AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE $initVector")
+
 
     try {
         keyBytes = secret_key.toByteArray(charset("UTF8"))
@@ -33,8 +40,8 @@
         val input = strToEncrypt.toByteArray(charset("UTF8"))
 
         synchronized(Cipher::class.java) {
-            val cipher = Cipher.getInstance("AES/ECB/PKCS7Padding")
-            cipher.init(Cipher.ENCRYPT_MODE, skey)
+            val cipher = Cipher.getInstance("AES/CBC/PKCS7Padding")
+            cipher.init(Cipher.ENCRYPT_MODE, skey, iv)
 
             val cipherText = ByteArray(cipher.getOutputSize(input.size))
             var ctLength = cipher.update(
@@ -68,16 +75,18 @@
 fun decryptWithAESmeta(key: String, strToDecrypt: String?): String? {
     Security.addProvider(BouncyCastleProvider())
     var keyBytes: ByteArray
+    val initVector = "7c5afb00aaecb1a1"
 
     try {
+        val iv = IvParameterSpec(initVector.toByteArray(charset("UTF-8")))
         keyBytes = key.toByteArray(charset("UTF8"))
         val skey = SecretKeySpec(keyBytes, "AES")
         val input = org.bouncycastle.util.encoders.Base64
             .decode(strToDecrypt?.trim { it <= ' ' }?.toByteArray(charset("UTF8")))
 
         synchronized(Cipher::class.java) {
-            val cipher = Cipher.getInstance("AES/ECB/PKCS7Padding")
-            cipher.init(Cipher.DECRYPT_MODE, skey)
+            val cipher = Cipher.getInstance("AES/CBC/PKCS7Padding")
+            cipher.init(Cipher.DECRYPT_MODE, skey, iv)
 
             val plainText = ByteArray(cipher.getOutputSize(input.size))
             var ptLength = cipher.update(input, 0, input.size, plainText, 0)
@@ -176,4 +185,19 @@
     // reading a value
     println(sharedPreferences.getString(chatUid, ""))
     return sharedPreferences.getString(chatUid, "") // -> "some_data"
+}
+
+fun generateRandomIV(): String {
+    val ranGen = SecureRandom()
+    val aesKey = ByteArray(16)
+    ranGen.nextBytes(aesKey)
+    val result = StringBuffer()
+    for (b in aesKey) {
+        result.append(String.format("%02x", b))
+    }
+    return if (16 > result.toString().length) {
+        result.toString()
+    } else {
+        result.toString().substring(0, 16)
+    }
 }
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_rebase_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_rebase_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_rebase_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_rebase_[Default_Changelist]/shelved.patch	(revision 61aecb98de8cc827aadb6472252112d5a0bddc54)
+++ /dev/null	(revision 61aecb98de8cc827aadb6472252112d5a0bddc54)
@@ -1,806 +0,0 @@
-Index: app/src/main/java/com/singularity/ipcaplus/drawer/DrawerActivty.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.drawer\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.WelcomeActivity\r\nimport com.singularity.ipcaplus.utils.PreferenceHelper.email\r\nimport com.singularity.ipcaplus.utils.PreferenceHelper.password\r\nimport com.singularity.ipcaplus.utils.PreferenceHelper.userId\r\nimport com.singularity.ipcaplus.chat.SearchActivity\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.utils.PreferenceHelper\r\nimport com.singularity.ipcaplus.utils.UserLoggedIn\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport kotlin.random.Random\r\nimport androidx.core.view.ViewCompat\r\n\r\nimport androidx.core.app.ActivityOptionsCompat\r\nimport com.singularity.ipcaplus.AddButtonActivity\r\nimport com.singularity.ipcaplus.chat.CreateChatActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityProfileBinding\r\nimport com.singularity.ipcaplus.utils.Backend\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n    private lateinit var binding2: ActivityProfileBinding\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n       // binding2 = ActivityProfileBinding.inflate(layoutInflater)\r\n\r\n        setContentView(binding.root)\r\n\r\n       /* var imageView = binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile)\r\n        var imageView2 = binding2.imageViewProfile.id*/\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            /*val options = ActivityOptionsCompat.makeSceneTransitionAnimation(\r\n                this,\r\n                imageView,\r\n                imageView2.toString()\r\n            )*/\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        Utilis.getFile(this,\"profilePictures/\" + Firebase.auth.uid + \".png\", \"png\") { bitmap ->\r\n            binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setImageBitmap(bitmap)\r\n        }\r\n        if(!UserLoggedIn.name.isNullOrEmpty()){\r\n            val name = Utilis.getFirstAndLastName(UserLoggedIn.name!!)\r\n            binding.navView.getHeaderView(0).findViewById<TextView>(R.id.textView3).text = name\r\n            binding.navView.getHeaderView(0).findViewById<TextView>(R.id.emailTextView).text = UserLoggedIn.email\r\n        }\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Generate key for chats\r\n        val keygen = metaGenrateKey()\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n\r\n            val intent = Intent(this, AddButtonActivity::class.java)\r\n            startActivity(intent)\r\n\r\n            /*\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\",\r\n                keygen\r\n            )\r\n            // Build encryptation data of first message send by the system\r\n            var meta = encryptMeta(\"This is an Alpha Chat, bugs are expected,\" +\r\n                    \" please report them if you found some. Welcome to Singularity!\", keygen)\r\n            val id_amigo = \"Y90PjGQmLsMrxLicWkirOKpPSOx2\"\r\n            val message = Message(\r\n                \"system\",\r\n                meta.toString(),\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n                    db.collection(\"profile\")\r\n                        .document(id_amigo)\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }*/\r\n\r\n        }\r\n\r\n        // Log Out Button\r\n        binding.logoutLayout.setOnClickListener {\r\n\r\n            val prefs = PreferenceHelper.customPreference(this, \"User_data\")\r\n            prefs.password = null\r\n            prefs.email = null\r\n            prefs.userId = null\r\n\r\n            val intent = Intent(this, WelcomeActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n\r\n    /*\r\n        Refresh Activity Content\r\n    */\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        Utilis.getFile(this,\"profilePictures/\" + Firebase.auth.uid!! + \".png\", \"png\") { bitmap ->\r\n            binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setImageBitmap(bitmap)\r\n        }\r\n    }\r\n\r\n\r\n        override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        // Handle item selection\r\n        return when (item.itemId) {\r\n            R.id.search_btn -> {\r\n                val intent = Intent(this, SearchActivity::class.java)\r\n                startActivity(intent)\r\n\r\n                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/drawer/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/drawer/DrawerActivty.kt
---- a/app/src/main/java/com/singularity/ipcaplus/drawer/DrawerActivty.kt	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-+++ b/app/src/main/java/com/singularity/ipcaplus/drawer/DrawerActivty.kt	(date 1641230212949)
-@@ -1,6 +1,9 @@
- package com.singularity.ipcaplus.drawer
- 
-+import android.content.BroadcastReceiver
- import android.content.ContentValues
-+import android.content.ContentValues.TAG
-+import android.content.Context
- import android.content.Intent
- import androidx.appcompat.app.AppCompatActivity
- import android.os.Bundle
-@@ -10,6 +13,7 @@
- import android.view.WindowManager
- import android.widget.ImageView
- import android.widget.TextView
-+import android.widget.Toast
- import androidx.drawerlayout.widget.DrawerLayout
- import androidx.navigation.findNavController
- import androidx.navigation.ui.AppBarConfiguration
-@@ -33,17 +37,16 @@
- import com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding
- import com.singularity.ipcaplus.models.Chat
- import com.singularity.ipcaplus.models.Message
--import com.singularity.ipcaplus.utils.PreferenceHelper
--import com.singularity.ipcaplus.utils.UserLoggedIn
--import com.singularity.ipcaplus.utils.Utilis
- import kotlin.random.Random
- import androidx.core.view.ViewCompat
- 
- import androidx.core.app.ActivityOptionsCompat
-+import com.google.android.gms.tasks.OnCompleteListener
-+import com.google.firebase.messaging.FirebaseMessaging
- import com.singularity.ipcaplus.AddButtonActivity
- import com.singularity.ipcaplus.chat.CreateChatActivity
- import com.singularity.ipcaplus.databinding.ActivityProfileBinding
--import com.singularity.ipcaplus.utils.Backend
-+import com.singularity.ipcaplus.utils.*
- 
- 
- class DrawerActivty : AppCompatActivity() {
-@@ -53,6 +56,29 @@
-     private lateinit var binding2: ActivityProfileBinding
-     val db = Firebase.firestore
- 
-+    var notificationReceiver : NotificationReceiver? = null
-+
-+    inner class NotificationReceiver : BroadcastReceiver() {
-+        override fun onReceive(p0: Context?, intent: Intent?) {
-+            intent?.extras?.getString(MyFirebaseMessagingService.NOTIFICATION_MESSAGE)?.let {
-+                alertNotificatio(this@MainActivity, it)
-+            }
-+        }
-+    }
-+
-+    override fun onResume() {
-+        super.onResume()
-+        notificationReceiver = NotificationReceiver()
-+        this.registerReceiver(notificationReceiver, IntentFilter(MyFirebaseMessagingService.BROADCAST_NEW_NOTIFICATION))
-+    }
-+
-+    override fun onPause() {
-+        super.onPause()
-+        notificationReceiver?.let {
-+            this.unregisterReceiver(it)
-+        }
-+    }
-+
-     override fun onCreate(savedInstanceState: Bundle?) {
-         super.onCreate(savedInstanceState)
- 
-@@ -174,6 +200,22 @@
-         setupActionBarWithNavController(navController, appBarConfiguration)
-         navView.setupWithNavController(navController)
- 
-+
-+        FirebaseMessaging.getInstance().token.addOnCompleteListener(OnCompleteListener { task ->
-+            if (!task.isSuccessful) {
-+                Log.w(TAG, "Fetching FCM registration token failed", task.exception)
-+                println("------------------------------------ não encontro o token")
-+                return@OnCompleteListener
-+            }
-+
-+            // Get new FCM registration token
-+            val token = task.result
-+
-+            // Log and toast
-+            val msg = "Token$token"
-+            Log.d(TAG, msg)
-+            Toast.makeText(baseContext, msg, Toast.LENGTH_SHORT).show()
-+        })
-     }
- 
- 
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]" date="1640607045965" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 12:10 PM [Default Changelist]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-@@ -1,168 +0,0 @@
--Index: app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.FirebaseUser\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAES\r\nimport com.singularity.ipcaplus.cryptography.encrypt\r\nimport com.singularity.ipcaplus.databinding.ActivityRegisterBinding\r\n\r\nclass RegisterActivity : AppCompatActivity() {\r\n    private lateinit var auth: FirebaseAuth\r\n    private lateinit var binding: ActivityRegisterBinding\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_login)\r\n\r\n        binding = ActivityRegisterBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        auth = Firebase.auth\r\n\r\n\r\n        binding.buttonRegister.setOnClickListener {\r\n            val email : String = binding.editTextEmail.text.toString()\r\n            val password : String = binding.editTextTextPassword.text.toString()\r\n\r\n\r\n            auth.createUserWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(this) { task ->\r\n                    if (task.isSuccessful) {\r\n                        // Sign in success, update UI with the signed-in user's information\r\n                        Log.d(TAG, \"createUserWithEmail:success\")\r\n                        val user = auth.currentUser\r\n                        emailVerification()\r\n                        startActivity(Intent(this, LoginActivity::class.java ))\r\n                    } else {\r\n                        // If sign in fails, display a message to the user.\r\n                        Log.w(TAG, \"createUserWithEmail:failure\", task.exception)\r\n                        Toast.makeText(baseContext, \"Authentication failed.\",\r\n                            Toast.LENGTH_SHORT).show()\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    private fun emailVerification() {\r\n\r\n        auth.currentUser?.sendEmailVerification()\r\n            ?.addOnCompleteListener { task ->\r\n                if (task.isSuccessful) {\r\n                    // below message changed and user is navigated to Sign In activity\r\n                    val user = auth.currentUser\r\n                    Toast.makeText(\r\n                        this, \"Sign Up successful. Verification link sent to the Email address\",\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }\r\n            }\r\n\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt b/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt
----- a/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt	(revision 259ef520c64e84cee5b29ce2aa11b4d2c88df187)
--+++ b/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt	(date 1640617365737)
--@@ -1,17 +1,15 @@
-- package com.singularity.ipcaplus
-- 
---import android.content.ContentValues.TAG
--+import android.content.ContentValues
-- import android.content.Intent
---import androidx.appcompat.app.AppCompatActivity
-- import android.os.Bundle
-- import android.util.Log
-- import android.widget.Toast
--+import androidx.appcompat.app.AppCompatActivity
--+import com.google.android.material.snackbar.Snackbar
-- import com.google.firebase.auth.FirebaseAuth
---import com.google.firebase.auth.FirebaseUser
-- import com.google.firebase.auth.ktx.auth
-- import com.google.firebase.ktx.Firebase
---import com.singularity.ipcaplus.cryptography.decryptWithAES
---import com.singularity.ipcaplus.cryptography.encrypt
-- import com.singularity.ipcaplus.databinding.ActivityRegisterBinding
-- 
-- class RegisterActivity : AppCompatActivity() {
--@@ -33,22 +31,27 @@
--             val email : String = binding.editTextEmail.text.toString()
--             val password : String = binding.editTextTextPassword.text.toString()
-- 
---
---            auth.createUserWithEmailAndPassword(email, password)
---                .addOnCompleteListener(this) { task ->
---                    if (task.isSuccessful) {
---                        // Sign in success, update UI with the signed-in user's information
---                        Log.d(TAG, "createUserWithEmail:success")
---                        val user = auth.currentUser
---                        emailVerification()
---                        startActivity(Intent(this, LoginActivity::class.java ))
---                    } else {
---                        // If sign in fails, display a message to the user.
---                        Log.w(TAG, "createUserWithEmail:failure", task.exception)
---                        Toast.makeText(baseContext, "Authentication failed.",
---                            Toast.LENGTH_SHORT).show()
--+            val emailDomain = Utilis.getEmailDomain(email)
--+            if(emailDomain != "alunos.ipca.pt" && emailDomain != "ipca.pt"){
--+                Snackbar.make(binding.root,
--+                    "You need to Sign Up with (ipca.pt) email!", Snackbar.LENGTH_SHORT).show()
--+            }else{
--+                auth.createUserWithEmailAndPassword(email, password)
--+                    .addOnCompleteListener(this) { task ->
--+                        if (task.isSuccessful) {
--+                            // Sign in success, update UI with the signed-in user's information
--+                            Log.d(ContentValues.TAG, "createUserWithEmail:success")
--+                            val user = auth.currentUser
--+                            emailVerification()
--+                            startActivity(Intent(this, LoginActivity::class.java ))
--+                        } else {
--+                            // If sign in fails, display a message to the user.
--+                            Log.w(ContentValues.TAG, "createUserWithEmail:failure", task.exception)
--+                            Toast.makeText(baseContext, "Authentication failed.",
--+                                Toast.LENGTH_SHORT).show()
--+                        }
--                     }
---                }
--+            }
--         }
--     }
-- 
--Index: app/src/main/java/com/singularity/ipcaplus/Backend.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.singularity.ipcaplus\r\n\r\nimport android.graphics.Color\r\nimport com.github.sundeepk.compactcalendarview.domain.Event\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.Query\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.models.*\r\n\r\nobject Backend {\r\n\r\n    val db = Firebase.firestore\r\n\r\n    /*\r\n       ------------------------------------------------ Events ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all events during the month in the firebase to an list\r\n       @month = selected month\r\n       @callBack = return the list\r\n    */\r\n    fun getAllMonthEvents(month: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        // Get all user chat ids\r\n        val chatIds = arrayListOf<String>()\r\n        getAllUserChatIds {\r\n            chatIds.addAll(it)\r\n\r\n            // Search in all chats\r\n            for (id in chatIds) {\r\n                db.collection(\"chat\")\r\n                    .document(id)\r\n                    .collection(\"event\")\r\n                    .addSnapshotListener { documents, _ ->\r\n\r\n                        documents?.let {\r\n\r\n                            for (document in documents) {\r\n                                val event = EventCalendar.fromHash(document)\r\n                                event.id = document.id\r\n\r\n                                val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                                if (month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                                    events.add(event)\r\n                                }\r\n                            }\r\n                            callBack(events)\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun getAllUserChatIds(callBack: (List<String>)->Unit) {\r\n\r\n        val chatIds = arrayListOf<String>()\r\n\r\n        // Get Group Chats Ids\r\n        db.collection(\"profile\").document(Firebase.auth.currentUser!!.uid).collection(\"chat\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        chatIds.add(document.id)\r\n                    }\r\n\r\n                    callBack(chatIds)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the month in the firebase to an list\r\n       @month = selected month\r\n       @callBack = return the list\r\n    */\r\n    fun getAllChatMonthEvents(month: String, chat_id: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chat_id)\r\n            .collection(\"event\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val event = EventCalendar.fromHash(document)\r\n                        event.id = document.id\r\n\r\n                        val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                        if (month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                            events.add(event)\r\n                        }\r\n                    }\r\n\r\n                    callBack(events)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the day in the firebase to an list\r\n       @day = selected day\r\n       @callBack = return the list\r\n    */\r\n    fun getAllChatMonthDayEvents(month: String, day: Int, chat_id: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chat_id)\r\n            .collection(\"event\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val event = EventCalendar.fromHash(document)\r\n                        event.id = document.id\r\n\r\n                        val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                        if (day == Utilis.getDay(date).toInt() && month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                            events.add(event)\r\n                        }\r\n                    }\r\n\r\n                    callBack(events)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the day in the firebase to an list\r\n       @day = selected day\r\n       @callBack = return the list\r\n    */\r\n    fun getAllMonthDayEvents(month: String, day: Int, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        // Get all user chat ids\r\n        val chatIds = arrayListOf<String>()\r\n        getAllUserChatIds {\r\n            chatIds.addAll(it)\r\n\r\n            // Search in all chats\r\n            for (id in chatIds) {\r\n                db.collection(\"chat\")\r\n                    .document(id)\r\n                    .collection(\"event\")\r\n                    .addSnapshotListener { documents, _ ->\r\n\r\n                        documents?.let {\r\n\r\n                            for (document in documents) {\r\n                                val event = EventCalendar.fromHash(document)\r\n                                event.id = document.id\r\n\r\n                                val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                                if (day == Utilis.getDay(date).toInt() && month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                                    events.add(event)\r\n                                }\r\n                            }\r\n\r\n                            callBack(events)\r\n                        }\r\n\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun deleteEvent(chatID: String, eventID: String) {\r\n\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"event\")\r\n            .document(eventID)\r\n            .delete()\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Schedule ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all events in the firebase to an list\r\n       @callBack = return the list\r\n    */\r\n    fun getDayCourseSubjects(day: String, courseId: String, callBack: (List<Subject>)->Unit) {\r\n\r\n        val subjects = arrayListOf<Subject>()\r\n        val subjectsWithBreaks = arrayListOf<Subject>()\r\n\r\n        db.collection(\"course\").document(courseId).collection(\"subject\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n\r\n                    // Add every subject to the list\r\n                    for (document in documents) {\r\n                        val subject = Subject.fromHash(document)\r\n                        if (day == subject.day) {\r\n                            subjects.add(subject)\r\n                        }\r\n                    }\r\n\r\n                    // Order the subjects by time\r\n                    for (i in 0 until subjects.size) {\r\n                        for (j in 0 until subjects.size - 1) {\r\n\r\n                            if (Utilis.convertHoursStringToInt(subjects[j].start_time) > Utilis.convertHoursStringToInt(subjects[j+1].start_time)) {\r\n                                val temp = subjects[j]\r\n                                subjects[j] = subjects[j + 1]\r\n                                subjects[j + 1] = temp\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Add Break Times Between Classes\r\n                    for (i in 0 until subjects.size) {\r\n                        if (i % 2 == 0) {\r\n                            subjectsWithBreaks.add(subjects[i])\r\n                        }\r\n                        else {\r\n                            val diff = Utilis.convertHoursStringToInt(subjects[i].start_time) - Utilis.convertHoursStringToInt(subjects[i-1].end_time)\r\n                            subjectsWithBreaks.add(Subject(\"breaktime\", diff.toString()))\r\n                            subjectsWithBreaks.add(subjects[i])\r\n                        }\r\n                    }\r\n\r\n                    callBack(subjectsWithBreaks)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns the user course by callback\r\n       @id = user uid\r\n    */\r\n    fun getUserCourse(uid: String, callBack:(String)->Unit) {\r\n\r\n        db.collection(\"profile\")\r\n            .document(uid)\r\n            .collection(\"course\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    var courseId = \"\"\r\n                    for (document in documents)\r\n                        courseId = document.id\r\n\r\n                    callBack(courseId)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Contacts ------------------------------------------------\r\n    */\r\n    /*\r\n       This function returns all contacts in the firebase to an list\r\n       @callBack = return the list\r\n    */\r\n    fun getAllContacts(callBack: (List<Contact>)->Unit) {\r\n\r\n        val contacts = arrayListOf<Contact>()\r\n\r\n        db.collection(\"contacts\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val contact = Contact.fromHash(document)\r\n                        contacts.add(contact)\r\n                    }\r\n\r\n                    callBack(contacts)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Chats ------------------------------------------------\r\n    */\r\n    /*\r\n    /*\r\n       This function returns chats based on given type\r\n       @callBack = return the list\r\n    */\r\n    fun getChatByType(type: String ,callBack: (List<Chat>, List<String>)->Unit) {\r\n\r\n        val chats = arrayListOf<Chat>()\r\n        val chatIds = arrayListOf<String>()\r\n\r\n        db.collection(\"profile\").document(\"${Firebase.auth.currentUser!!.uid}\").collection(\"chat\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        val chat = Chat.fromHash(document)\r\n                        if (type == chat.type) {\r\n                            chats.add(chat)\r\n                            chatIds.add(document.id)\r\n                        }\r\n                    }\r\n\r\n                    callBack(chats, chatIds)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n    */\r\n\r\n    /*\r\n       This function returns last chat message by chat id\r\n       @callBack = return the list\r\n    */\r\n    fun getLastMessageByChatID(chatID: String, callBack: (Message?)->Unit) {\r\n\r\n        var message : Message? = null\r\n\r\n        db.collection(\"chat\").document(\"${chatID}\").collection(\"message\")\r\n            .orderBy(\"time\", Query.Direction.DESCENDING).limit(1)\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        message = Message.fromHash(document)\r\n                        }\r\n                    }\r\n\r\n                    callBack(message)\r\n                }\r\n\r\n    }\r\n\r\n\r\n    fun getChatAdminIds(chatID: String, callBack: (List<String>)->Unit) {\r\n\r\n        val adminIds = arrayListOf<String>()\r\n\r\n        // Get Group Chats Ids\r\n        db.collection(\"chat\").document(chatID).collection(\"admin\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        adminIds.add(document.id)\r\n                    }\r\n\r\n                    callBack(adminIds)\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/singularity/ipcaplus/Backend.kt b/app/src/main/java/com/singularity/ipcaplus/Backend.kt
----- a/app/src/main/java/com/singularity/ipcaplus/Backend.kt	(revision 259ef520c64e84cee5b29ce2aa11b4d2c88df187)
--+++ b/app/src/main/java/com/singularity/ipcaplus/Backend.kt	(date 1640617597444)
--@@ -1,12 +1,13 @@
-- package com.singularity.ipcaplus
-- 
---import android.graphics.Color
---import com.github.sundeepk.compactcalendarview.domain.Event
-- import com.google.firebase.auth.ktx.auth
-- import com.google.firebase.firestore.Query
-- import com.google.firebase.firestore.ktx.firestore
-- import com.google.firebase.ktx.Firebase
---import com.singularity.ipcaplus.models.*
--+import com.singularity.ipcaplus.models.Contact
--+import com.singularity.ipcaplus.models.EventCalendar
--+import com.singularity.ipcaplus.models.Message
--+import com.singularity.ipcaplus.models.Subject
-- 
-- object Backend {
-- 
--@@ -375,5 +376,27 @@
-- 
--     }
-- 
--+    /*
--+       ------------------------------------------------ Register Manipulation ------------------------------------------------
--+    */
--+
--+    fun getIpcaData(email: String, callBack: (Message?)->Unit) {
--+
--+        var message : Message? = null
--+
--+        db.collection("ipca_data")
--+            .addSnapshotListener { documents, _ ->
--+                documents?.let {
--+                    for (document in documents) {
--+                        message = Message.fromHash(document)
--+                    }
--+                }
--+
--+                callBack(message)
--+            }
--+
--+    }
--+
--+
-- 
-- }
--\ No newline at end of file
--Index: app/src/main/java/com/singularity/ipcaplus/Utilis.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport androidx.annotation.RequiresApi\r\nimport java.io.IOException\r\nimport java.text.SimpleDateFormat\r\nimport java.time.LocalDate\r\nimport java.util.*\r\nimport java.util.regex.Pattern\r\n\r\nobject  Utilis {\r\n\r\n    /*\r\n        This function return the current month id\r\n     */\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getCurrentMonthId(): Int {\r\n\r\n        val c = LocalDate.now()\r\n        val strArray = Pattern.compile(\"-\").split(c.toString())\r\n\r\n        return strArray[1].toInt()\r\n    }\r\n\r\n    /*\r\n        This function return the current year id\r\n     */\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getCurrentYear(): String {\r\n\r\n        val c = LocalDate.now()\r\n        val strArray = Pattern.compile(\"-\").split(c.toString())\r\n\r\n        return strArray[0]\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getYearByCalendarId(id: Int): Int {\r\n\r\n        var count = id\r\n        var result = 2021 - 121\r\n\r\n        while (count > 0) {\r\n            count -= 1\r\n            result ++\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    /*\r\n        This function return the month value in string by an id\r\n        @month = month id\r\n     */\r\n    fun getMonthById(month: Int): String {\r\n        return when (month) {\r\n            1 -> \"Janeiro\"\r\n            2 -> \"Fevereiro\"\r\n            3 -> \"Março\"\r\n            4 -> \"Abril\"\r\n            5 -> \"Maio\"\r\n            6 -> \"Junho\"\r\n            7 -> \"Julho\"\r\n            8 -> \"Agosto\"\r\n            9 -> \"Setembro\"\r\n            10 -> \"Outubro\"\r\n            11 -> \"Novembro\"\r\n            12 -> \"Dezembro\"\r\n            else -> \"None\"\r\n        }\r\n    }\r\n\r\n    fun convertHoursStringToInt(strVal: String): Int {\r\n        val strArray = Pattern.compile(\":\").split(strVal)\r\n        val result = strArray[0] + strArray[1]\r\n        return result.toInt()\r\n    }\r\n\r\n    fun getDate(milliSeconds: Long, dateFormat: String?): String {\r\n        // Create a DateFormatter object for displaying date in specified format.\r\n        val formatter = SimpleDateFormat(dateFormat)\r\n\r\n        // Create a calendar object that will convert the date and time value in milliseconds to date.\r\n        val calendar: Calendar = Calendar.getInstance()\r\n        calendar.timeInMillis = milliSeconds\r\n        return formatter.format(calendar.time)\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the day\r\n        @date = default date\r\n     */\r\n    fun getDay(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\"T\").split(strArray[2])\r\n\r\n        return strArray2[0]\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the month in text\r\n        @date = default date\r\n     */\r\n    fun getMonth(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n\r\n        return strArray[1].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the year in text\r\n        @date = default date\r\n     */\r\n    fun getYear(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n\r\n        return strArray[0].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the Hours in text\r\n        @date = default date\r\n     */\r\n    fun getHours(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"T\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\":\").split(strArray[1])\r\n\r\n        return strArray2[0].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the Minutes in text\r\n        @date = default date\r\n     */\r\n    fun getMinutes(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"T\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\":\").split(strArray[1])\r\n\r\n        return strArray2[1].toString()\r\n    }\r\n\r\n\r\n    fun getJsonDataFromAsset(context: Context, fileName: String): String? {\r\n        val jsonString: String\r\n        try {\r\n            jsonString = context.assets.open(fileName).bufferedReader().use { it.readText() }\r\n        } catch (ioException: IOException) {\r\n            ioException.printStackTrace()\r\n            return null\r\n        }\r\n        return jsonString\r\n    }\r\n\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/singularity/ipcaplus/Utilis.kt b/app/src/main/java/com/singularity/ipcaplus/Utilis.kt
----- a/app/src/main/java/com/singularity/ipcaplus/Utilis.kt	(revision 259ef520c64e84cee5b29ce2aa11b4d2c88df187)
--+++ b/app/src/main/java/com/singularity/ipcaplus/Utilis.kt	(date 1640616340275)
--@@ -155,6 +155,9 @@
--         return strArray2[1].toString()
--     }
-- 
--+    /*
--+        This function get the buffer with the name of filename on assets folder
--+     */
-- 
--     fun getJsonDataFromAsset(context: Context, fileName: String): String? {
--         val jsonString: String
--@@ -167,4 +170,16 @@
--         return jsonString
--     }
-- 
--+    /*
--+        This function gets the domain of email
--+        split remove the @ and make the array like this -> [a20115][alunos.ipca.pt]
--+     */
--+    fun getEmailDomain(email: String) : String{
--+        val strArray = Pattern.compile("@").split(email)
--+        val result= strArray[1]
--+
--+        return result.toString()
--+
--+    }
--+
-- }
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-@@ -1,47 +0,0 @@
--Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport java.util.Base64\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.lang.StringBuilder\r\nimport java.util.Base64.getEncoder\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.crypto.KeyGenerator\r\nimport javax.crypto.SecretKey\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n\r\n        /*val message = \"Hello Welcome to Solanium Dr.Diogo\"\r\n        var meta = encryptMeta(message, keygen)\r\n        println(meta)\r\n\r\n        val message_decripted = decryptWithAESmeta(keygen, meta)\r\n        println(message_decripted)*/\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n\r\n            /*val keygen = metaGenrateKey()\r\n\r\n            val intent = Intent(this, ChatActivity::class.java)\r\n            intent.putExtra(\"keygen\", keygen)\r\n            startActivity(intent)*/\r\n\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n            )\r\n\r\n            var meta = encryptMeta(\"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\", \"662ede816988e58fb6d057d9d85605e0\")\r\n            val message = Message(\r\n                \"system\",\r\n                meta.toString(),\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
----- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--+++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640484576403)
--@@ -31,11 +31,8 @@
-- import com.singularity.ipcaplus.models.Chat
-- import com.singularity.ipcaplus.models.Message
-- import com.singularity.ipcaplus.profile.ProfileActivity
---import java.lang.StringBuilder
---import java.util.Base64.getEncoder
-- import java.util.concurrent.TimeUnit
-- import javax.crypto.KeyGenerator
---import javax.crypto.SecretKey
-- import kotlin.random.Random
-- 
-- 
--Index: .idea/deploymentTargetDropDown.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
----- a/.idea/deploymentTargetDropDown.xml	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--+++ b/.idea/deploymentTargetDropDown.xml	(date 1640484631324)
--@@ -7,11 +7,11 @@
--         <deviceKey>
--           <Key>
--             <type value="VIRTUAL_DEVICE_PATH" />
---            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
--+            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
--           </Key>
--         </deviceKey>
--       </Target>
--     </targetSelectedWithDropDown>
---    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
--+    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
--   </component>
-- </project>
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM__Default_Changelist_.xml	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]" date="1640607098047" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 12:11 PM [Default Changelist]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-@@ -1,115 +0,0 @@
--Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.PreferenceHelper.email\r\nimport com.singularity.ipcaplus.PreferenceHelper.password\r\nimport com.singularity.ipcaplus.PreferenceHelper.userId\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.util.concurrent.TimeUnit\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n\r\n            )\r\n            val message = Message(\r\n                \"system\",\r\n                \"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\",\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n\r\n        // Log Out Button\r\n        binding.logoutLayout.setOnClickListener {\r\n\r\n            val prefs = PreferenceHelper.customPreference(this, \"User_data\")\r\n            prefs.password = null\r\n            prefs.email = null\r\n            prefs.userId = null\r\n\r\n            val intent = Intent(this, WelcomeActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
----- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision 94adac9c4d1446b5b44892110de1ee705a5ef903)
--+++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640607043249)
--@@ -130,6 +130,7 @@
--         setupActionBarWithNavController(navController, appBarConfiguration)
--         navView.setupWithNavController(navController)
-- 
--+
--     }
-- 
--     override fun onCreateOptionsMenu(menu: Menu): Boolean {
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
--new file mode 100644
----- /dev/null	(date 1640603575056)
--+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch	(date 1640603575056)
--@@ -0,0 +1,47 @@
--+Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--+<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport java.util.Base64\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.lang.StringBuilder\r\nimport java.util.Base64.getEncoder\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.crypto.KeyGenerator\r\nimport javax.crypto.SecretKey\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n\r\n        /*val message = \"Hello Welcome to Solanium Dr.Diogo\"\r\n        var meta = encryptMeta(message, keygen)\r\n        println(meta)\r\n\r\n        val message_decripted = decryptWithAESmeta(keygen, meta)\r\n        println(message_decripted)*/\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n\r\n            /*val keygen = metaGenrateKey()\r\n\r\n            val intent = Intent(this, ChatActivity::class.java)\r\n            intent.putExtra(\"keygen\", keygen)\r\n            startActivity(intent)*/\r\n\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n            )\r\n\r\n            var meta = encryptMeta(\"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\", \"662ede816988e58fb6d057d9d85605e0\")\r\n            val message = Message(\r\n                \"system\",\r\n                meta.toString(),\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--+--- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--++++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640484576403)
--+@@ -31,11 +31,8 @@
--+ import com.singularity.ipcaplus.models.Chat
--+ import com.singularity.ipcaplus.models.Message
--+ import com.singularity.ipcaplus.profile.ProfileActivity
--+-import java.lang.StringBuilder
--+-import java.util.Base64.getEncoder
--+ import java.util.concurrent.TimeUnit
--+ import javax.crypto.KeyGenerator
--+-import javax.crypto.SecretKey
--+ import kotlin.random.Random
--+ 
--+ 
--+Index: .idea/deploymentTargetDropDown.xml
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--+--- a/.idea/deploymentTargetDropDown.xml	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--++++ b/.idea/deploymentTargetDropDown.xml	(date 1640484631324)
--+@@ -7,11 +7,11 @@
--+         <deviceKey>
--+           <Key>
--+             <type value="VIRTUAL_DEVICE_PATH" />
--+-            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
--++            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
--+           </Key>
--+         </deviceKey>
--+       </Target>
--+     </targetSelectedWithDropDown>
--+-    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
--++    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
--+   </component>
--+ </project>
--+\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
--new file mode 100644
----- /dev/null	(date 1640603694749)
--+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml	(date 1640603694749)
--@@ -0,0 +1,4 @@
--+<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]" date="1640603683316" recycled="true" deleted="true">
--+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch" />
--+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 11:12 AM [Default Changelist]" />
--+</changelist>
--\ No newline at end of file
--Index: .idea/deploymentTargetDropDown.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
----- a/.idea/deploymentTargetDropDown.xml	(revision 94adac9c4d1446b5b44892110de1ee705a5ef903)
--+++ b/.idea/deploymentTargetDropDown.xml	(date 1640603683277)
--@@ -7,11 +7,11 @@
--         <deviceKey>
--           <Key>
--             <type value="VIRTUAL_DEVICE_PATH" />
---            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
--+            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
--           </Key>
--         </deviceKey>
--       </Target>
--     </targetSelectedWithDropDown>
---    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
--+    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
--   </component>
-- </project>
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-@@ -1,255 +0,0 @@
--Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.PreferenceHelper.email\r\nimport com.singularity.ipcaplus.PreferenceHelper.password\r\nimport com.singularity.ipcaplus.PreferenceHelper.userId\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.util.concurrent.TimeUnit\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n\r\n            )\r\n            val message = Message(\r\n                \"system\",\r\n                \"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\",\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n\r\n        // Log Out Button\r\n        binding.logoutLayout.setOnClickListener {\r\n\r\n            val prefs = PreferenceHelper.customPreference(this, \"User_data\")\r\n            prefs.password = null\r\n            prefs.email = null\r\n            prefs.userId = null\r\n\r\n            val intent = Intent(this, WelcomeActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
----- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision 8dc1056a94ce651214eaf46bac161cbcb2a45bf0)
--+++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640607045782)
--@@ -130,6 +130,7 @@
--         setupActionBarWithNavController(navController, appBarConfiguration)
--         navView.setupWithNavController(navController)
-- 
--+
--     }
-- 
--     override fun onCreateOptionsMenu(menu: Menu): Boolean {
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml
--new file mode 100644
----- /dev/null	(date 1640607060734)
--+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml	(date 1640607060734)
--@@ -0,0 +1,4 @@
--+<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]" date="1640607045965" recycled="true" deleted="true">
--+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch" />
--+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 12:10 PM [Default Changelist]" />
--+</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
--new file mode 100644
----- /dev/null	(date 1640607060741)
--+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml	(date 1640607060741)
--@@ -0,0 +1,4 @@
--+<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]" date="1640603683316" recycled="true" deleted="true">
--+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch" />
--+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 11:12 AM [Default Changelist]" />
--+</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
--new file mode 100644
----- /dev/null	(date 1640607045791)
--+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch	(date 1640607045791)
--@@ -0,0 +1,47 @@
--+Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--+<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport java.util.Base64\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.lang.StringBuilder\r\nimport java.util.Base64.getEncoder\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.crypto.KeyGenerator\r\nimport javax.crypto.SecretKey\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n\r\n        /*val message = \"Hello Welcome to Solanium Dr.Diogo\"\r\n        var meta = encryptMeta(message, keygen)\r\n        println(meta)\r\n\r\n        val message_decripted = decryptWithAESmeta(keygen, meta)\r\n        println(message_decripted)*/\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n\r\n            /*val keygen = metaGenrateKey()\r\n\r\n            val intent = Intent(this, ChatActivity::class.java)\r\n            intent.putExtra(\"keygen\", keygen)\r\n            startActivity(intent)*/\r\n\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n            )\r\n\r\n            var meta = encryptMeta(\"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\", \"662ede816988e58fb6d057d9d85605e0\")\r\n            val message = Message(\r\n                \"system\",\r\n                meta.toString(),\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--+--- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--++++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640484576403)
--+@@ -31,11 +31,8 @@
--+ import com.singularity.ipcaplus.models.Chat
--+ import com.singularity.ipcaplus.models.Message
--+ import com.singularity.ipcaplus.profile.ProfileActivity
--+-import java.lang.StringBuilder
--+-import java.util.Base64.getEncoder
--+ import java.util.concurrent.TimeUnit
--+ import javax.crypto.KeyGenerator
--+-import javax.crypto.SecretKey
--+ import kotlin.random.Random
--+ 
--+ 
--+Index: .idea/deploymentTargetDropDown.xml
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--+--- a/.idea/deploymentTargetDropDown.xml	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--++++ b/.idea/deploymentTargetDropDown.xml	(date 1640484631324)
--+@@ -7,11 +7,11 @@
--+         <deviceKey>
--+           <Key>
--+             <type value="VIRTUAL_DEVICE_PATH" />
--+-            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
--++            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
--+           </Key>
--+         </deviceKey>
--+       </Target>
--+     </targetSelectedWithDropDown>
--+-    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
--++    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
--+   </component>
--+ </project>
--+\ No newline at end of file
--Index: .idea/deploymentTargetDropDown.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
----- a/.idea/deploymentTargetDropDown.xml	(revision 8dc1056a94ce651214eaf46bac161cbcb2a45bf0)
--+++ b/.idea/deploymentTargetDropDown.xml	(date 1640607045802)
--@@ -7,11 +7,11 @@
--         <deviceKey>
--           <Key>
--             <type value="VIRTUAL_DEVICE_PATH" />
---            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
--+            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
--           </Key>
--         </deviceKey>
--       </Target>
--     </targetSelectedWithDropDown>
---    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
--+    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
--   </component>
-- </project>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch
--new file mode 100644
----- /dev/null	(date 1640607045101)
--+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch	(date 1640607045101)
--@@ -0,0 +1,115 @@
--+Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--+<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.PreferenceHelper.email\r\nimport com.singularity.ipcaplus.PreferenceHelper.password\r\nimport com.singularity.ipcaplus.PreferenceHelper.userId\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.util.concurrent.TimeUnit\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n\r\n            )\r\n            val message = Message(\r\n                \"system\",\r\n                \"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\",\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n\r\n        // Log Out Button\r\n        binding.logoutLayout.setOnClickListener {\r\n\r\n            val prefs = PreferenceHelper.customPreference(this, \"User_data\")\r\n            prefs.password = null\r\n            prefs.email = null\r\n            prefs.userId = null\r\n\r\n            val intent = Intent(this, WelcomeActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--+--- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision 94adac9c4d1446b5b44892110de1ee705a5ef903)
--++++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640607043249)
--+@@ -130,6 +130,7 @@
--+         setupActionBarWithNavController(navController, appBarConfiguration)
--+         navView.setupWithNavController(navController)
--+ 
--++
--+     }
--+ 
--+     override fun onCreateOptionsMenu(menu: Menu): Boolean {
--+Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
--+new file mode 100644
--+--- /dev/null	(date 1640603575056)
--++++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch	(date 1640603575056)
--+@@ -0,0 +1,47 @@
--++Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--++IDEA additional info:
--++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--++<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport java.util.Base64\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.lang.StringBuilder\r\nimport java.util.Base64.getEncoder\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.crypto.KeyGenerator\r\nimport javax.crypto.SecretKey\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n\r\n        /*val message = \"Hello Welcome to Solanium Dr.Diogo\"\r\n        var meta = encryptMeta(message, keygen)\r\n        println(meta)\r\n\r\n        val message_decripted = decryptWithAESmeta(keygen, meta)\r\n        println(message_decripted)*/\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n\r\n            /*val keygen = metaGenrateKey()\r\n\r\n            val intent = Intent(this, ChatActivity::class.java)\r\n            intent.putExtra(\"keygen\", keygen)\r\n            startActivity(intent)*/\r\n\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n            )\r\n\r\n            var meta = encryptMeta(\"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\", \"662ede816988e58fb6d057d9d85605e0\")\r\n            val message = Message(\r\n                \"system\",\r\n                meta.toString(),\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--++<+>UTF-8
--++===================================================================
--++diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--++--- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--+++++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640484576403)
--++@@ -31,11 +31,8 @@
--++ import com.singularity.ipcaplus.models.Chat
--++ import com.singularity.ipcaplus.models.Message
--++ import com.singularity.ipcaplus.profile.ProfileActivity
--++-import java.lang.StringBuilder
--++-import java.util.Base64.getEncoder
--++ import java.util.concurrent.TimeUnit
--++ import javax.crypto.KeyGenerator
--++-import javax.crypto.SecretKey
--++ import kotlin.random.Random
--++ 
--++ 
--++Index: .idea/deploymentTargetDropDown.xml
--++IDEA additional info:
--++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--++<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
--++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--++<+>UTF-8
--++===================================================================
--++diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--++--- a/.idea/deploymentTargetDropDown.xml	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--+++++ b/.idea/deploymentTargetDropDown.xml	(date 1640484631324)
--++@@ -7,11 +7,11 @@
--++         <deviceKey>
--++           <Key>
--++             <type value="VIRTUAL_DEVICE_PATH" />
--++-            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
--+++            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
--++           </Key>
--++         </deviceKey>
--++       </Target>
--++     </targetSelectedWithDropDown>
--++-    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
--+++    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
--++   </component>
--++ </project>
--++\ No newline at end of file
--+Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
--+new file mode 100644
--+--- /dev/null	(date 1640603694749)
--++++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml	(date 1640603694749)
--+@@ -0,0 +1,4 @@
--++<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]" date="1640603683316" recycled="true" deleted="true">
--++  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch" />
--++  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 11:12 AM [Default Changelist]" />
--++</changelist>
--+\ No newline at end of file
--+Index: .idea/deploymentTargetDropDown.xml
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--+--- a/.idea/deploymentTargetDropDown.xml	(revision 94adac9c4d1446b5b44892110de1ee705a5ef903)
--++++ b/.idea/deploymentTargetDropDown.xml	(date 1640603683277)
--+@@ -7,11 +7,11 @@
--+         <deviceKey>
--+           <Key>
--+             <type value="VIRTUAL_DEVICE_PATH" />
--+-            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
--++            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
--+           </Key>
--+         </deviceKey>
--+       </Target>
--+     </targetSelectedWithDropDown>
--+-    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
--++    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
--+   </component>
--+ </project>
--+\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]" date="1640603683316" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 11:12 AM [Default Changelist]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM__Default_Changelist_.xml	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]" date="1640617599712" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 3:06 PM [Default Changelist]" />
--</changelist>
-\ No newline at end of file
-Index: app/src/main/java/com/singularity/ipcaplus/Alerts.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/Alerts.kt b/app/src/main/java/com/singularity/ipcaplus/Alerts.kt
-new file mode 100644
---- /dev/null	(date 1641230309317)
-+++ b/app/src/main/java/com/singularity/ipcaplus/Alerts.kt	(date 1641230309317)
-@@ -0,0 +1,32 @@
-+package com.singularity.ipcaplus
-+
-+import android.app.Activity
-+import android.view.Gravity
-+import android.view.View
-+import android.widget.Button
-+import android.widget.TextView
-+import androidx.appcompat.app.AlertDialog
-+import kotlinx.coroutines.*
-+
-+fun alertNotificatio(context: Activity, message: String) : AlertDialog {
-+
-+    val dialogView: View = context.layoutInflater.inflate(R.layout.alert_discard, null)
-+
-+    val builder = AlertDialog.Builder(context)
-+    builder.setCancelable(false)
-+    builder.setView(dialogView)
-+    val alertDialog = builder.create()
-+
-+    alertDialog.window?.setGravity(Gravity.CENTER)
-+    alertDialog.window?.setBackgroundDrawableResource(android.R.color.transparent)
-+    val textViewTitle = dialogView.findViewById<TextView>(R.id.textViewAlertMessage)
-+    textViewTitle.text = message
-+
-+    alertDialog.show()
-+
-+    GlobalScope.launch (Dispatchers.Main){
-+        delay(2000)
-+        alertDialog.dismiss()
-+    }
-+    return alertDialog
-+}
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_03_01_2022_15_56_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_03_01_2022_15_56_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_03_01_2022_15_56_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_03_01_2022_15_56_[Default_Changelist]/shelved.patch	(revision 61aecb98de8cc827aadb6472252112d5a0bddc54)
+++ /dev/null	(revision 61aecb98de8cc827aadb6472252112d5a0bddc54)
@@ -1,778 +0,0 @@
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM__Default_Changelist_.xml	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-+++ /dev/null	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]" date="1640607098047" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 12:11 PM [Default Changelist]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-+++ /dev/null	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]" date="1640607045965" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 12:10 PM [Default Changelist]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-+++ /dev/null	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-@@ -1,115 +0,0 @@
--Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.PreferenceHelper.email\r\nimport com.singularity.ipcaplus.PreferenceHelper.password\r\nimport com.singularity.ipcaplus.PreferenceHelper.userId\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.util.concurrent.TimeUnit\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n\r\n            )\r\n            val message = Message(\r\n                \"system\",\r\n                \"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\",\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n\r\n        // Log Out Button\r\n        binding.logoutLayout.setOnClickListener {\r\n\r\n            val prefs = PreferenceHelper.customPreference(this, \"User_data\")\r\n            prefs.password = null\r\n            prefs.email = null\r\n            prefs.userId = null\r\n\r\n            val intent = Intent(this, WelcomeActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
----- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision 94adac9c4d1446b5b44892110de1ee705a5ef903)
--+++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640607043249)
--@@ -130,6 +130,7 @@
--         setupActionBarWithNavController(navController, appBarConfiguration)
--         navView.setupWithNavController(navController)
-- 
--+
--     }
-- 
--     override fun onCreateOptionsMenu(menu: Menu): Boolean {
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
--new file mode 100644
----- /dev/null	(date 1640603575056)
--+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch	(date 1640603575056)
--@@ -0,0 +1,47 @@
--+Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--+<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport java.util.Base64\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.lang.StringBuilder\r\nimport java.util.Base64.getEncoder\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.crypto.KeyGenerator\r\nimport javax.crypto.SecretKey\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n\r\n        /*val message = \"Hello Welcome to Solanium Dr.Diogo\"\r\n        var meta = encryptMeta(message, keygen)\r\n        println(meta)\r\n\r\n        val message_decripted = decryptWithAESmeta(keygen, meta)\r\n        println(message_decripted)*/\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n\r\n            /*val keygen = metaGenrateKey()\r\n\r\n            val intent = Intent(this, ChatActivity::class.java)\r\n            intent.putExtra(\"keygen\", keygen)\r\n            startActivity(intent)*/\r\n\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n            )\r\n\r\n            var meta = encryptMeta(\"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\", \"662ede816988e58fb6d057d9d85605e0\")\r\n            val message = Message(\r\n                \"system\",\r\n                meta.toString(),\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--+--- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--++++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640484576403)
--+@@ -31,11 +31,8 @@
--+ import com.singularity.ipcaplus.models.Chat
--+ import com.singularity.ipcaplus.models.Message
--+ import com.singularity.ipcaplus.profile.ProfileActivity
--+-import java.lang.StringBuilder
--+-import java.util.Base64.getEncoder
--+ import java.util.concurrent.TimeUnit
--+ import javax.crypto.KeyGenerator
--+-import javax.crypto.SecretKey
--+ import kotlin.random.Random
--+ 
--+ 
--+Index: .idea/deploymentTargetDropDown.xml
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--+--- a/.idea/deploymentTargetDropDown.xml	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--++++ b/.idea/deploymentTargetDropDown.xml	(date 1640484631324)
--+@@ -7,11 +7,11 @@
--+         <deviceKey>
--+           <Key>
--+             <type value="VIRTUAL_DEVICE_PATH" />
--+-            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
--++            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
--+           </Key>
--+         </deviceKey>
--+       </Target>
--+     </targetSelectedWithDropDown>
--+-    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
--++    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
--+   </component>
--+ </project>
--+\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
--new file mode 100644
----- /dev/null	(date 1640603694749)
--+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml	(date 1640603694749)
--@@ -0,0 +1,4 @@
--+<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]" date="1640603683316" recycled="true" deleted="true">
--+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch" />
--+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 11:12 AM [Default Changelist]" />
--+</changelist>
--\ No newline at end of file
--Index: .idea/deploymentTargetDropDown.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
----- a/.idea/deploymentTargetDropDown.xml	(revision 94adac9c4d1446b5b44892110de1ee705a5ef903)
--+++ b/.idea/deploymentTargetDropDown.xml	(date 1640603683277)
--@@ -7,11 +7,11 @@
--         <deviceKey>
--           <Key>
--             <type value="VIRTUAL_DEVICE_PATH" />
---            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
--+            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
--           </Key>
--         </deviceKey>
--       </Target>
--     </targetSelectedWithDropDown>
---    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
--+    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
--   </component>
-- </project>
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-+++ /dev/null	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-@@ -1,168 +0,0 @@
--Index: app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.FirebaseUser\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAES\r\nimport com.singularity.ipcaplus.cryptography.encrypt\r\nimport com.singularity.ipcaplus.databinding.ActivityRegisterBinding\r\n\r\nclass RegisterActivity : AppCompatActivity() {\r\n    private lateinit var auth: FirebaseAuth\r\n    private lateinit var binding: ActivityRegisterBinding\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_login)\r\n\r\n        binding = ActivityRegisterBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        auth = Firebase.auth\r\n\r\n\r\n        binding.buttonRegister.setOnClickListener {\r\n            val email : String = binding.editTextEmail.text.toString()\r\n            val password : String = binding.editTextTextPassword.text.toString()\r\n\r\n\r\n            auth.createUserWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(this) { task ->\r\n                    if (task.isSuccessful) {\r\n                        // Sign in success, update UI with the signed-in user's information\r\n                        Log.d(TAG, \"createUserWithEmail:success\")\r\n                        val user = auth.currentUser\r\n                        emailVerification()\r\n                        startActivity(Intent(this, LoginActivity::class.java ))\r\n                    } else {\r\n                        // If sign in fails, display a message to the user.\r\n                        Log.w(TAG, \"createUserWithEmail:failure\", task.exception)\r\n                        Toast.makeText(baseContext, \"Authentication failed.\",\r\n                            Toast.LENGTH_SHORT).show()\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    private fun emailVerification() {\r\n\r\n        auth.currentUser?.sendEmailVerification()\r\n            ?.addOnCompleteListener { task ->\r\n                if (task.isSuccessful) {\r\n                    // below message changed and user is navigated to Sign In activity\r\n                    val user = auth.currentUser\r\n                    Toast.makeText(\r\n                        this, \"Sign Up successful. Verification link sent to the Email address\",\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }\r\n            }\r\n\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt b/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt
----- a/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt	(revision 259ef520c64e84cee5b29ce2aa11b4d2c88df187)
--+++ b/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt	(date 1640617365737)
--@@ -1,17 +1,15 @@
-- package com.singularity.ipcaplus
-- 
---import android.content.ContentValues.TAG
--+import android.content.ContentValues
-- import android.content.Intent
---import androidx.appcompat.app.AppCompatActivity
-- import android.os.Bundle
-- import android.util.Log
-- import android.widget.Toast
--+import androidx.appcompat.app.AppCompatActivity
--+import com.google.android.material.snackbar.Snackbar
-- import com.google.firebase.auth.FirebaseAuth
---import com.google.firebase.auth.FirebaseUser
-- import com.google.firebase.auth.ktx.auth
-- import com.google.firebase.ktx.Firebase
---import com.singularity.ipcaplus.cryptography.decryptWithAES
---import com.singularity.ipcaplus.cryptography.encrypt
-- import com.singularity.ipcaplus.databinding.ActivityRegisterBinding
-- 
-- class RegisterActivity : AppCompatActivity() {
--@@ -33,22 +31,27 @@
--             val email : String = binding.editTextEmail.text.toString()
--             val password : String = binding.editTextTextPassword.text.toString()
-- 
---
---            auth.createUserWithEmailAndPassword(email, password)
---                .addOnCompleteListener(this) { task ->
---                    if (task.isSuccessful) {
---                        // Sign in success, update UI with the signed-in user's information
---                        Log.d(TAG, "createUserWithEmail:success")
---                        val user = auth.currentUser
---                        emailVerification()
---                        startActivity(Intent(this, LoginActivity::class.java ))
---                    } else {
---                        // If sign in fails, display a message to the user.
---                        Log.w(TAG, "createUserWithEmail:failure", task.exception)
---                        Toast.makeText(baseContext, "Authentication failed.",
---                            Toast.LENGTH_SHORT).show()
--+            val emailDomain = Utilis.getEmailDomain(email)
--+            if(emailDomain != "alunos.ipca.pt" && emailDomain != "ipca.pt"){
--+                Snackbar.make(binding.root,
--+                    "You need to Sign Up with (ipca.pt) email!", Snackbar.LENGTH_SHORT).show()
--+            }else{
--+                auth.createUserWithEmailAndPassword(email, password)
--+                    .addOnCompleteListener(this) { task ->
--+                        if (task.isSuccessful) {
--+                            // Sign in success, update UI with the signed-in user's information
--+                            Log.d(ContentValues.TAG, "createUserWithEmail:success")
--+                            val user = auth.currentUser
--+                            emailVerification()
--+                            startActivity(Intent(this, LoginActivity::class.java ))
--+                        } else {
--+                            // If sign in fails, display a message to the user.
--+                            Log.w(ContentValues.TAG, "createUserWithEmail:failure", task.exception)
--+                            Toast.makeText(baseContext, "Authentication failed.",
--+                                Toast.LENGTH_SHORT).show()
--+                        }
--                     }
---                }
--+            }
--         }
--     }
-- 
--Index: app/src/main/java/com/singularity/ipcaplus/Backend.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.singularity.ipcaplus\r\n\r\nimport android.graphics.Color\r\nimport com.github.sundeepk.compactcalendarview.domain.Event\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.Query\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.models.*\r\n\r\nobject Backend {\r\n\r\n    val db = Firebase.firestore\r\n\r\n    /*\r\n       ------------------------------------------------ Events ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all events during the month in the firebase to an list\r\n       @month = selected month\r\n       @callBack = return the list\r\n    */\r\n    fun getAllMonthEvents(month: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        // Get all user chat ids\r\n        val chatIds = arrayListOf<String>()\r\n        getAllUserChatIds {\r\n            chatIds.addAll(it)\r\n\r\n            // Search in all chats\r\n            for (id in chatIds) {\r\n                db.collection(\"chat\")\r\n                    .document(id)\r\n                    .collection(\"event\")\r\n                    .addSnapshotListener { documents, _ ->\r\n\r\n                        documents?.let {\r\n\r\n                            for (document in documents) {\r\n                                val event = EventCalendar.fromHash(document)\r\n                                event.id = document.id\r\n\r\n                                val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                                if (month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                                    events.add(event)\r\n                                }\r\n                            }\r\n                            callBack(events)\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun getAllUserChatIds(callBack: (List<String>)->Unit) {\r\n\r\n        val chatIds = arrayListOf<String>()\r\n\r\n        // Get Group Chats Ids\r\n        db.collection(\"profile\").document(Firebase.auth.currentUser!!.uid).collection(\"chat\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        chatIds.add(document.id)\r\n                    }\r\n\r\n                    callBack(chatIds)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the month in the firebase to an list\r\n       @month = selected month\r\n       @callBack = return the list\r\n    */\r\n    fun getAllChatMonthEvents(month: String, chat_id: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chat_id)\r\n            .collection(\"event\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val event = EventCalendar.fromHash(document)\r\n                        event.id = document.id\r\n\r\n                        val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                        if (month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                            events.add(event)\r\n                        }\r\n                    }\r\n\r\n                    callBack(events)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the day in the firebase to an list\r\n       @day = selected day\r\n       @callBack = return the list\r\n    */\r\n    fun getAllChatMonthDayEvents(month: String, day: Int, chat_id: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chat_id)\r\n            .collection(\"event\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val event = EventCalendar.fromHash(document)\r\n                        event.id = document.id\r\n\r\n                        val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                        if (day == Utilis.getDay(date).toInt() && month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                            events.add(event)\r\n                        }\r\n                    }\r\n\r\n                    callBack(events)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the day in the firebase to an list\r\n       @day = selected day\r\n       @callBack = return the list\r\n    */\r\n    fun getAllMonthDayEvents(month: String, day: Int, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        // Get all user chat ids\r\n        val chatIds = arrayListOf<String>()\r\n        getAllUserChatIds {\r\n            chatIds.addAll(it)\r\n\r\n            // Search in all chats\r\n            for (id in chatIds) {\r\n                db.collection(\"chat\")\r\n                    .document(id)\r\n                    .collection(\"event\")\r\n                    .addSnapshotListener { documents, _ ->\r\n\r\n                        documents?.let {\r\n\r\n                            for (document in documents) {\r\n                                val event = EventCalendar.fromHash(document)\r\n                                event.id = document.id\r\n\r\n                                val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                                if (day == Utilis.getDay(date).toInt() && month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                                    events.add(event)\r\n                                }\r\n                            }\r\n\r\n                            callBack(events)\r\n                        }\r\n\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun deleteEvent(chatID: String, eventID: String) {\r\n\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"event\")\r\n            .document(eventID)\r\n            .delete()\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Schedule ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all events in the firebase to an list\r\n       @callBack = return the list\r\n    */\r\n    fun getDayCourseSubjects(day: String, courseId: String, callBack: (List<Subject>)->Unit) {\r\n\r\n        val subjects = arrayListOf<Subject>()\r\n        val subjectsWithBreaks = arrayListOf<Subject>()\r\n\r\n        db.collection(\"course\").document(courseId).collection(\"subject\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n\r\n                    // Add every subject to the list\r\n                    for (document in documents) {\r\n                        val subject = Subject.fromHash(document)\r\n                        if (day == subject.day) {\r\n                            subjects.add(subject)\r\n                        }\r\n                    }\r\n\r\n                    // Order the subjects by time\r\n                    for (i in 0 until subjects.size) {\r\n                        for (j in 0 until subjects.size - 1) {\r\n\r\n                            if (Utilis.convertHoursStringToInt(subjects[j].start_time) > Utilis.convertHoursStringToInt(subjects[j+1].start_time)) {\r\n                                val temp = subjects[j]\r\n                                subjects[j] = subjects[j + 1]\r\n                                subjects[j + 1] = temp\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Add Break Times Between Classes\r\n                    for (i in 0 until subjects.size) {\r\n                        if (i % 2 == 0) {\r\n                            subjectsWithBreaks.add(subjects[i])\r\n                        }\r\n                        else {\r\n                            val diff = Utilis.convertHoursStringToInt(subjects[i].start_time) - Utilis.convertHoursStringToInt(subjects[i-1].end_time)\r\n                            subjectsWithBreaks.add(Subject(\"breaktime\", diff.toString()))\r\n                            subjectsWithBreaks.add(subjects[i])\r\n                        }\r\n                    }\r\n\r\n                    callBack(subjectsWithBreaks)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns the user course by callback\r\n       @id = user uid\r\n    */\r\n    fun getUserCourse(uid: String, callBack:(String)->Unit) {\r\n\r\n        db.collection(\"profile\")\r\n            .document(uid)\r\n            .collection(\"course\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    var courseId = \"\"\r\n                    for (document in documents)\r\n                        courseId = document.id\r\n\r\n                    callBack(courseId)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Contacts ------------------------------------------------\r\n    */\r\n    /*\r\n       This function returns all contacts in the firebase to an list\r\n       @callBack = return the list\r\n    */\r\n    fun getAllContacts(callBack: (List<Contact>)->Unit) {\r\n\r\n        val contacts = arrayListOf<Contact>()\r\n\r\n        db.collection(\"contacts\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val contact = Contact.fromHash(document)\r\n                        contacts.add(contact)\r\n                    }\r\n\r\n                    callBack(contacts)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Chats ------------------------------------------------\r\n    */\r\n    /*\r\n    /*\r\n       This function returns chats based on given type\r\n       @callBack = return the list\r\n    */\r\n    fun getChatByType(type: String ,callBack: (List<Chat>, List<String>)->Unit) {\r\n\r\n        val chats = arrayListOf<Chat>()\r\n        val chatIds = arrayListOf<String>()\r\n\r\n        db.collection(\"profile\").document(\"${Firebase.auth.currentUser!!.uid}\").collection(\"chat\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        val chat = Chat.fromHash(document)\r\n                        if (type == chat.type) {\r\n                            chats.add(chat)\r\n                            chatIds.add(document.id)\r\n                        }\r\n                    }\r\n\r\n                    callBack(chats, chatIds)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n    */\r\n\r\n    /*\r\n       This function returns last chat message by chat id\r\n       @callBack = return the list\r\n    */\r\n    fun getLastMessageByChatID(chatID: String, callBack: (Message?)->Unit) {\r\n\r\n        var message : Message? = null\r\n\r\n        db.collection(\"chat\").document(\"${chatID}\").collection(\"message\")\r\n            .orderBy(\"time\", Query.Direction.DESCENDING).limit(1)\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        message = Message.fromHash(document)\r\n                        }\r\n                    }\r\n\r\n                    callBack(message)\r\n                }\r\n\r\n    }\r\n\r\n\r\n    fun getChatAdminIds(chatID: String, callBack: (List<String>)->Unit) {\r\n\r\n        val adminIds = arrayListOf<String>()\r\n\r\n        // Get Group Chats Ids\r\n        db.collection(\"chat\").document(chatID).collection(\"admin\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        adminIds.add(document.id)\r\n                    }\r\n\r\n                    callBack(adminIds)\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/singularity/ipcaplus/Backend.kt b/app/src/main/java/com/singularity/ipcaplus/Backend.kt
----- a/app/src/main/java/com/singularity/ipcaplus/Backend.kt	(revision 259ef520c64e84cee5b29ce2aa11b4d2c88df187)
--+++ b/app/src/main/java/com/singularity/ipcaplus/Backend.kt	(date 1640617597444)
--@@ -1,12 +1,13 @@
-- package com.singularity.ipcaplus
-- 
---import android.graphics.Color
---import com.github.sundeepk.compactcalendarview.domain.Event
-- import com.google.firebase.auth.ktx.auth
-- import com.google.firebase.firestore.Query
-- import com.google.firebase.firestore.ktx.firestore
-- import com.google.firebase.ktx.Firebase
---import com.singularity.ipcaplus.models.*
--+import com.singularity.ipcaplus.models.Contact
--+import com.singularity.ipcaplus.models.EventCalendar
--+import com.singularity.ipcaplus.models.Message
--+import com.singularity.ipcaplus.models.Subject
-- 
-- object Backend {
-- 
--@@ -375,5 +376,27 @@
-- 
--     }
-- 
--+    /*
--+       ------------------------------------------------ Register Manipulation ------------------------------------------------
--+    */
--+
--+    fun getIpcaData(email: String, callBack: (Message?)->Unit) {
--+
--+        var message : Message? = null
--+
--+        db.collection("ipca_data")
--+            .addSnapshotListener { documents, _ ->
--+                documents?.let {
--+                    for (document in documents) {
--+                        message = Message.fromHash(document)
--+                    }
--+                }
--+
--+                callBack(message)
--+            }
--+
--+    }
--+
--+
-- 
-- }
--\ No newline at end of file
--Index: app/src/main/java/com/singularity/ipcaplus/Utilis.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport androidx.annotation.RequiresApi\r\nimport java.io.IOException\r\nimport java.text.SimpleDateFormat\r\nimport java.time.LocalDate\r\nimport java.util.*\r\nimport java.util.regex.Pattern\r\n\r\nobject  Utilis {\r\n\r\n    /*\r\n        This function return the current month id\r\n     */\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getCurrentMonthId(): Int {\r\n\r\n        val c = LocalDate.now()\r\n        val strArray = Pattern.compile(\"-\").split(c.toString())\r\n\r\n        return strArray[1].toInt()\r\n    }\r\n\r\n    /*\r\n        This function return the current year id\r\n     */\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getCurrentYear(): String {\r\n\r\n        val c = LocalDate.now()\r\n        val strArray = Pattern.compile(\"-\").split(c.toString())\r\n\r\n        return strArray[0]\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getYearByCalendarId(id: Int): Int {\r\n\r\n        var count = id\r\n        var result = 2021 - 121\r\n\r\n        while (count > 0) {\r\n            count -= 1\r\n            result ++\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    /*\r\n        This function return the month value in string by an id\r\n        @month = month id\r\n     */\r\n    fun getMonthById(month: Int): String {\r\n        return when (month) {\r\n            1 -> \"Janeiro\"\r\n            2 -> \"Fevereiro\"\r\n            3 -> \"Março\"\r\n            4 -> \"Abril\"\r\n            5 -> \"Maio\"\r\n            6 -> \"Junho\"\r\n            7 -> \"Julho\"\r\n            8 -> \"Agosto\"\r\n            9 -> \"Setembro\"\r\n            10 -> \"Outubro\"\r\n            11 -> \"Novembro\"\r\n            12 -> \"Dezembro\"\r\n            else -> \"None\"\r\n        }\r\n    }\r\n\r\n    fun convertHoursStringToInt(strVal: String): Int {\r\n        val strArray = Pattern.compile(\":\").split(strVal)\r\n        val result = strArray[0] + strArray[1]\r\n        return result.toInt()\r\n    }\r\n\r\n    fun getDate(milliSeconds: Long, dateFormat: String?): String {\r\n        // Create a DateFormatter object for displaying date in specified format.\r\n        val formatter = SimpleDateFormat(dateFormat)\r\n\r\n        // Create a calendar object that will convert the date and time value in milliseconds to date.\r\n        val calendar: Calendar = Calendar.getInstance()\r\n        calendar.timeInMillis = milliSeconds\r\n        return formatter.format(calendar.time)\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the day\r\n        @date = default date\r\n     */\r\n    fun getDay(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\"T\").split(strArray[2])\r\n\r\n        return strArray2[0]\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the month in text\r\n        @date = default date\r\n     */\r\n    fun getMonth(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n\r\n        return strArray[1].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the year in text\r\n        @date = default date\r\n     */\r\n    fun getYear(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n\r\n        return strArray[0].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the Hours in text\r\n        @date = default date\r\n     */\r\n    fun getHours(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"T\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\":\").split(strArray[1])\r\n\r\n        return strArray2[0].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the Minutes in text\r\n        @date = default date\r\n     */\r\n    fun getMinutes(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"T\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\":\").split(strArray[1])\r\n\r\n        return strArray2[1].toString()\r\n    }\r\n\r\n\r\n    fun getJsonDataFromAsset(context: Context, fileName: String): String? {\r\n        val jsonString: String\r\n        try {\r\n            jsonString = context.assets.open(fileName).bufferedReader().use { it.readText() }\r\n        } catch (ioException: IOException) {\r\n            ioException.printStackTrace()\r\n            return null\r\n        }\r\n        return jsonString\r\n    }\r\n\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/singularity/ipcaplus/Utilis.kt b/app/src/main/java/com/singularity/ipcaplus/Utilis.kt
----- a/app/src/main/java/com/singularity/ipcaplus/Utilis.kt	(revision 259ef520c64e84cee5b29ce2aa11b4d2c88df187)
--+++ b/app/src/main/java/com/singularity/ipcaplus/Utilis.kt	(date 1640616340275)
--@@ -155,6 +155,9 @@
--         return strArray2[1].toString()
--     }
-- 
--+    /*
--+        This function get the buffer with the name of filename on assets folder
--+     */
-- 
--     fun getJsonDataFromAsset(context: Context, fileName: String): String? {
--         val jsonString: String
--@@ -167,4 +170,16 @@
--         return jsonString
--     }
-- 
--+    /*
--+        This function gets the domain of email
--+        split remove the @ and make the array like this -> [a20115][alunos.ipca.pt]
--+     */
--+    fun getEmailDomain(email: String) : String{
--+        val strArray = Pattern.compile("@").split(email)
--+        val result= strArray[1]
--+
--+        return result.toString()
--+
--+    }
--+
-- }
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-+++ /dev/null	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-@@ -1,255 +0,0 @@
--Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.PreferenceHelper.email\r\nimport com.singularity.ipcaplus.PreferenceHelper.password\r\nimport com.singularity.ipcaplus.PreferenceHelper.userId\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.util.concurrent.TimeUnit\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n\r\n            )\r\n            val message = Message(\r\n                \"system\",\r\n                \"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\",\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n\r\n        // Log Out Button\r\n        binding.logoutLayout.setOnClickListener {\r\n\r\n            val prefs = PreferenceHelper.customPreference(this, \"User_data\")\r\n            prefs.password = null\r\n            prefs.email = null\r\n            prefs.userId = null\r\n\r\n            val intent = Intent(this, WelcomeActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
----- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision 8dc1056a94ce651214eaf46bac161cbcb2a45bf0)
--+++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640607045782)
--@@ -130,6 +130,7 @@
--         setupActionBarWithNavController(navController, appBarConfiguration)
--         navView.setupWithNavController(navController)
-- 
--+
--     }
-- 
--     override fun onCreateOptionsMenu(menu: Menu): Boolean {
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml
--new file mode 100644
----- /dev/null	(date 1640607060734)
--+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml	(date 1640607060734)
--@@ -0,0 +1,4 @@
--+<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]" date="1640607045965" recycled="true" deleted="true">
--+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch" />
--+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 12:10 PM [Default Changelist]" />
--+</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
--new file mode 100644
----- /dev/null	(date 1640607060741)
--+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml	(date 1640607060741)
--@@ -0,0 +1,4 @@
--+<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]" date="1640603683316" recycled="true" deleted="true">
--+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch" />
--+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 11:12 AM [Default Changelist]" />
--+</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
--new file mode 100644
----- /dev/null	(date 1640607045791)
--+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch	(date 1640607045791)
--@@ -0,0 +1,47 @@
--+Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--+<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport java.util.Base64\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.lang.StringBuilder\r\nimport java.util.Base64.getEncoder\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.crypto.KeyGenerator\r\nimport javax.crypto.SecretKey\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n\r\n        /*val message = \"Hello Welcome to Solanium Dr.Diogo\"\r\n        var meta = encryptMeta(message, keygen)\r\n        println(meta)\r\n\r\n        val message_decripted = decryptWithAESmeta(keygen, meta)\r\n        println(message_decripted)*/\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n\r\n            /*val keygen = metaGenrateKey()\r\n\r\n            val intent = Intent(this, ChatActivity::class.java)\r\n            intent.putExtra(\"keygen\", keygen)\r\n            startActivity(intent)*/\r\n\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n            )\r\n\r\n            var meta = encryptMeta(\"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\", \"662ede816988e58fb6d057d9d85605e0\")\r\n            val message = Message(\r\n                \"system\",\r\n                meta.toString(),\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--+--- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--++++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640484576403)
--+@@ -31,11 +31,8 @@
--+ import com.singularity.ipcaplus.models.Chat
--+ import com.singularity.ipcaplus.models.Message
--+ import com.singularity.ipcaplus.profile.ProfileActivity
--+-import java.lang.StringBuilder
--+-import java.util.Base64.getEncoder
--+ import java.util.concurrent.TimeUnit
--+ import javax.crypto.KeyGenerator
--+-import javax.crypto.SecretKey
--+ import kotlin.random.Random
--+ 
--+ 
--+Index: .idea/deploymentTargetDropDown.xml
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--+--- a/.idea/deploymentTargetDropDown.xml	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--++++ b/.idea/deploymentTargetDropDown.xml	(date 1640484631324)
--+@@ -7,11 +7,11 @@
--+         <deviceKey>
--+           <Key>
--+             <type value="VIRTUAL_DEVICE_PATH" />
--+-            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
--++            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
--+           </Key>
--+         </deviceKey>
--+       </Target>
--+     </targetSelectedWithDropDown>
--+-    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
--++    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
--+   </component>
--+ </project>
--+\ No newline at end of file
--Index: .idea/deploymentTargetDropDown.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
----- a/.idea/deploymentTargetDropDown.xml	(revision 8dc1056a94ce651214eaf46bac161cbcb2a45bf0)
--+++ b/.idea/deploymentTargetDropDown.xml	(date 1640607045802)
--@@ -7,11 +7,11 @@
--         <deviceKey>
--           <Key>
--             <type value="VIRTUAL_DEVICE_PATH" />
---            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
--+            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
--           </Key>
--         </deviceKey>
--       </Target>
--     </targetSelectedWithDropDown>
---    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
--+    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
--   </component>
-- </project>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch
--new file mode 100644
----- /dev/null	(date 1640607045101)
--+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch	(date 1640607045101)
--@@ -0,0 +1,115 @@
--+Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--+<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.PreferenceHelper.email\r\nimport com.singularity.ipcaplus.PreferenceHelper.password\r\nimport com.singularity.ipcaplus.PreferenceHelper.userId\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.util.concurrent.TimeUnit\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n\r\n            )\r\n            val message = Message(\r\n                \"system\",\r\n                \"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\",\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n\r\n        // Log Out Button\r\n        binding.logoutLayout.setOnClickListener {\r\n\r\n            val prefs = PreferenceHelper.customPreference(this, \"User_data\")\r\n            prefs.password = null\r\n            prefs.email = null\r\n            prefs.userId = null\r\n\r\n            val intent = Intent(this, WelcomeActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--+--- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision 94adac9c4d1446b5b44892110de1ee705a5ef903)
--++++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640607043249)
--+@@ -130,6 +130,7 @@
--+         setupActionBarWithNavController(navController, appBarConfiguration)
--+         navView.setupWithNavController(navController)
--+ 
--++
--+     }
--+ 
--+     override fun onCreateOptionsMenu(menu: Menu): Boolean {
--+Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
--+new file mode 100644
--+--- /dev/null	(date 1640603575056)
--++++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch	(date 1640603575056)
--+@@ -0,0 +1,47 @@
--++Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--++IDEA additional info:
--++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--++<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport java.util.Base64\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.lang.StringBuilder\r\nimport java.util.Base64.getEncoder\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.crypto.KeyGenerator\r\nimport javax.crypto.SecretKey\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n\r\n        /*val message = \"Hello Welcome to Solanium Dr.Diogo\"\r\n        var meta = encryptMeta(message, keygen)\r\n        println(meta)\r\n\r\n        val message_decripted = decryptWithAESmeta(keygen, meta)\r\n        println(message_decripted)*/\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n\r\n            /*val keygen = metaGenrateKey()\r\n\r\n            val intent = Intent(this, ChatActivity::class.java)\r\n            intent.putExtra(\"keygen\", keygen)\r\n            startActivity(intent)*/\r\n\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n            )\r\n\r\n            var meta = encryptMeta(\"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\", \"662ede816988e58fb6d057d9d85605e0\")\r\n            val message = Message(\r\n                \"system\",\r\n                meta.toString(),\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--++<+>UTF-8
--++===================================================================
--++diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--++--- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--+++++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640484576403)
--++@@ -31,11 +31,8 @@
--++ import com.singularity.ipcaplus.models.Chat
--++ import com.singularity.ipcaplus.models.Message
--++ import com.singularity.ipcaplus.profile.ProfileActivity
--++-import java.lang.StringBuilder
--++-import java.util.Base64.getEncoder
--++ import java.util.concurrent.TimeUnit
--++ import javax.crypto.KeyGenerator
--++-import javax.crypto.SecretKey
--++ import kotlin.random.Random
--++ 
--++ 
--++Index: .idea/deploymentTargetDropDown.xml
--++IDEA additional info:
--++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--++<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
--++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--++<+>UTF-8
--++===================================================================
--++diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--++--- a/.idea/deploymentTargetDropDown.xml	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--+++++ b/.idea/deploymentTargetDropDown.xml	(date 1640484631324)
--++@@ -7,11 +7,11 @@
--++         <deviceKey>
--++           <Key>
--++             <type value="VIRTUAL_DEVICE_PATH" />
--++-            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
--+++            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
--++           </Key>
--++         </deviceKey>
--++       </Target>
--++     </targetSelectedWithDropDown>
--++-    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
--+++    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
--++   </component>
--++ </project>
--++\ No newline at end of file
--+Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
--+new file mode 100644
--+--- /dev/null	(date 1640603694749)
--++++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml	(date 1640603694749)
--+@@ -0,0 +1,4 @@
--++<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]" date="1640603683316" recycled="true" deleted="true">
--++  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch" />
--++  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 11:12 AM [Default Changelist]" />
--++</changelist>
--+\ No newline at end of file
--+Index: .idea/deploymentTargetDropDown.xml
--+IDEA additional info:
--+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
--+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--+<+>UTF-8
--+===================================================================
--+diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--+--- a/.idea/deploymentTargetDropDown.xml	(revision 94adac9c4d1446b5b44892110de1ee705a5ef903)
--++++ b/.idea/deploymentTargetDropDown.xml	(date 1640603683277)
--+@@ -7,11 +7,11 @@
--+         <deviceKey>
--+           <Key>
--+             <type value="VIRTUAL_DEVICE_PATH" />
--+-            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
--++            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
--+           </Key>
--+         </deviceKey>
--+       </Target>
--+     </targetSelectedWithDropDown>
--+-    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
--++    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
--+   </component>
--+ </project>
--+\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-+++ /dev/null	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-@@ -1,47 +0,0 @@
--Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport java.util.Base64\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.lang.StringBuilder\r\nimport java.util.Base64.getEncoder\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.crypto.KeyGenerator\r\nimport javax.crypto.SecretKey\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n\r\n        /*val message = \"Hello Welcome to Solanium Dr.Diogo\"\r\n        var meta = encryptMeta(message, keygen)\r\n        println(meta)\r\n\r\n        val message_decripted = decryptWithAESmeta(keygen, meta)\r\n        println(message_decripted)*/\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n\r\n            /*val keygen = metaGenrateKey()\r\n\r\n            val intent = Intent(this, ChatActivity::class.java)\r\n            intent.putExtra(\"keygen\", keygen)\r\n            startActivity(intent)*/\r\n\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n            )\r\n\r\n            var meta = encryptMeta(\"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\", \"662ede816988e58fb6d057d9d85605e0\")\r\n            val message = Message(\r\n                \"system\",\r\n                meta.toString(),\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
----- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--+++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640484576403)
--@@ -31,11 +31,8 @@
-- import com.singularity.ipcaplus.models.Chat
-- import com.singularity.ipcaplus.models.Message
-- import com.singularity.ipcaplus.profile.ProfileActivity
---import java.lang.StringBuilder
---import java.util.Base64.getEncoder
-- import java.util.concurrent.TimeUnit
-- import javax.crypto.KeyGenerator
---import javax.crypto.SecretKey
-- import kotlin.random.Random
-- 
-- 
--Index: .idea/deploymentTargetDropDown.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
----- a/.idea/deploymentTargetDropDown.xml	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
--+++ b/.idea/deploymentTargetDropDown.xml	(date 1640484631324)
--@@ -7,11 +7,11 @@
--         <deviceKey>
--           <Key>
--             <type value="VIRTUAL_DEVICE_PATH" />
---            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
--+            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
--           </Key>
--         </deviceKey>
--       </Target>
--     </targetSelectedWithDropDown>
---    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
--+    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
--   </component>
-- </project>
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-+++ /dev/null	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]" date="1640603683316" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 11:12 AM [Default Changelist]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_25_2021_11_48_PM__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_25_2021_11_48_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_25_2021_11_48_PM__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_25_2021_11_48_PM__Default_Changelist_.xml	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-+++ /dev/null	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_12_25_2021_11_48_PM_[Default_Changelist]" date="1640476111741" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_25_2021_11_48_PM_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/25/2021 11:48 PM [Default Changelist]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_25_2021_11_48_PM_[Default_Changelist]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_25_2021_11_48_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_25_2021_11_48_PM_[Default_Changelist]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_25_2021_11_48_PM_[Default_Changelist]/shelved.patch	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-+++ /dev/null	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-@@ -1,98 +0,0 @@
--Index: app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.singularity.ipcaplus.cryptography\r\n\r\nimport android.content.Context\r\nimport android.preference.PreferenceManager\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider\r\nimport org.bouncycastle.util.encoders.Base64\r\nimport java.io.*\r\nimport java.security.InvalidKeyException\r\nimport java.security.NoSuchAlgorithmException\r\nimport java.security.Security\r\nimport javax.crypto.*\r\nimport javax.crypto.spec.SecretKeySpec\r\n\r\n\r\nfun encryptMeta(strToEncrypt: String, secret_key: String): String? {\r\n    Security.addProvider(BouncyCastleProvider())\r\n    var keyBytes: ByteArray\r\n\r\n    try {\r\n        keyBytes = secret_key.toByteArray(charset(\"UTF8\"))\r\n        val skey = SecretKeySpec(keyBytes, \"AES\")\r\n        val input = strToEncrypt.toByteArray(charset(\"UTF8\"))\r\n\r\n        synchronized(Cipher::class.java) {\r\n            val cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\")\r\n            cipher.init(Cipher.ENCRYPT_MODE, skey)\r\n\r\n            val cipherText = ByteArray(cipher.getOutputSize(input.size))\r\n            var ctLength = cipher.update(\r\n                input, 0, input.size,\r\n                cipherText, 0\r\n            )\r\n            ctLength += cipher.doFinal(cipherText, ctLength)\r\n            return String(\r\n                Base64.encode(cipherText)\r\n            )\r\n        }\r\n    } catch (uee: UnsupportedEncodingException) {\r\n        uee.printStackTrace()\r\n    } catch (ibse: IllegalBlockSizeException) {\r\n        ibse.printStackTrace()\r\n    } catch (bpe: BadPaddingException) {\r\n        bpe.printStackTrace()\r\n    } catch (ike: InvalidKeyException) {\r\n        ike.printStackTrace()\r\n    } catch (nspe: NoSuchPaddingException) {\r\n        nspe.printStackTrace()\r\n    } catch (nsae: NoSuchAlgorithmException) {\r\n        nsae.printStackTrace()\r\n    } catch (e: ShortBufferException) {\r\n        e.printStackTrace()\r\n    }\r\n\r\n    return null\r\n}\r\n\r\n\r\nfun decryptWithAESmeta(key: String, strToDecrypt: String?): String? {\r\n    Security.addProvider(BouncyCastleProvider())\r\n    var keyBytes: ByteArray\r\n\r\n    try {\r\n        keyBytes = key.toByteArray(charset(\"UTF8\"))\r\n        val skey = SecretKeySpec(keyBytes, \"AES\")\r\n        val input = org.bouncycastle.util.encoders.Base64\r\n            .decode(strToDecrypt?.trim { it <= ' ' }?.toByteArray(charset(\"UTF8\")))\r\n\r\n        synchronized(Cipher::class.java) {\r\n            val cipher = Cipher.getInstance(\"AES/ECB/PKCS7Padding\")\r\n            cipher.init(Cipher.DECRYPT_MODE, skey)\r\n\r\n            val plainText = ByteArray(cipher.getOutputSize(input.size))\r\n            var ptLength = cipher.update(input, 0, input.size, plainText, 0)\r\n            ptLength += cipher.doFinal(plainText, ptLength)\r\n            val decryptedString = String(plainText)\r\n            return decryptedString.trim { it <= ' ' }\r\n        }\r\n    } catch (uee: UnsupportedEncodingException) {\r\n        uee.printStackTrace()\r\n    } catch (ibse: IllegalBlockSizeException) {\r\n        ibse.printStackTrace()\r\n    } catch (bpe: BadPaddingException) {\r\n        bpe.printStackTrace()\r\n    } catch (ike: InvalidKeyException) {\r\n        ike.printStackTrace()\r\n    } catch (nspe: NoSuchPaddingException) {\r\n        nspe.printStackTrace()\r\n    } catch (nsae: NoSuchAlgorithmException) {\r\n        nsae.printStackTrace()\r\n    } catch (e: ShortBufferException) {\r\n        e.printStackTrace()\r\n    }\r\n\r\n    return null\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt b/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt
----- a/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt	(revision 68db8e92ec156616c8dd39c656747d5b2c7a2133)
--+++ b/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt	(date 1640260278648)
--@@ -6,14 +6,17 @@
-- import org.bouncycastle.util.encoders.Base64
-- import java.io.*
-- import java.security.InvalidKeyException
--+import java.security.MessageDigest
-- import java.security.NoSuchAlgorithmException
-- import java.security.Security
--+import java.util.Objects.hash
-- import javax.crypto.*
-- import javax.crypto.spec.SecretKeySpec
-- 
-- 
-- fun encryptMeta(strToEncrypt: String, secret_key: String): String? {
--     Security.addProvider(BouncyCastleProvider())
--+    hash(strToEncrypt)
--     var keyBytes: ByteArray
-- 
--     try {
--@@ -54,7 +57,6 @@
--     return null
-- }
-- 
---
-- fun decryptWithAESmeta(key: String, strToDecrypt: String?): String? {
--     Security.addProvider(BouncyCastleProvider())
--     var keyBytes: ByteArray
--Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.util.concurrent.TimeUnit\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n\r\n            )\r\n            val message = Message(\r\n                \"system\",\r\n                \"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\",\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
----- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision 68db8e92ec156616c8dd39c656747d5b2c7a2133)
--+++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640260544587)
--@@ -21,11 +21,14 @@
-- import com.google.firebase.firestore.ktx.firestore
-- import com.google.firebase.ktx.Firebase
-- import com.singularity.ipcaplus.calendar.AddEventActivity
--+import com.singularity.ipcaplus.cryptography.decryptWithAESmeta
--+import com.singularity.ipcaplus.cryptography.encryptMeta
-- import com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding
-- import com.singularity.ipcaplus.models.Chat
-- import com.singularity.ipcaplus.models.Message
-- import com.singularity.ipcaplus.profile.ProfileActivity
-- import java.util.concurrent.TimeUnit
--+import javax.crypto.KeyGenerator
-- import kotlin.random.Random
-- 
-- 
--@@ -49,6 +52,18 @@
-- 
--         }
-- 
--+        val keygen = KeyGenerator.getInstance("AES")
--+        keygen.init(256)
--+
--+        val secret_key= keygen.init(256).toString()
--+        println(secret_key)
--+
--+        val message = "Hello Welcome to Solanium Dr.Diogo"
--+        var meta = encryptMeta(secret_key, message)
--+
--+        val message_decripted = decryptWithAESmeta(secret_key, meta)
--+        println(message_decripted)
--+
--         setSupportActionBar(binding.appBarMain.toolbar)
--         window.setFlags(
--             WindowManager.LayoutParams.FLAG_FULLSCREEN,
--Index: .idea/misc.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/breaktime.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/breaktime_form.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/button_filtro.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/button_green.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/button_register.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/button_week_day.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/circle.xml\" value=\"0.23802083333333332\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/custom_black_border.xml\" value=\"0.23802083333333332\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/datetime_selected_item.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/event_shape.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_arrow_back_24.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_baseline_arrow_back_ios_24.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_baseline_arrow_forward_ios_24.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_contact_icon.xml\" value=\"0.2520833333333333\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_documentdrawer_icons.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_folderdrawer_icons.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_foto_24.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_homedrawer_icons.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_lg_ipca.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_logo_branco_ipca.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_logout.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_menu_camera.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_menu_gallery.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_menu_slideshow.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_paper_24.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_search_24.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_swap_24.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/side_nav_bar.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_add_event.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_calendar.xml\" value=\"0.36277173913043476\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_chat.xml\" value=\"0.2359375\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_contacts.xml\" value=\"0.2359375\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_drawer_activty.xml\" value=\"0.2359375\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_login.xml\" value=\"0.2359375\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_main.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_profile.xml\" value=\"0.36277173913043476\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_register.xml\" value=\"0.2359375\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_schedule.xml\" value=\"0.3546195652173913\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_search.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_tab.xml\" value=\"0.2359375\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_welcome.xml\" value=\"0.2359375\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/app_bar_main.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/content_main.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/fragment_calendar.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/nav_header_main.xml\" value=\"0.358695652173913\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_event.xml\" value=\"0.7456647398843931\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_message_self.xml\" value=\"0.3546195652173913\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_subject.xml\" value=\"0.3546195652173913\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/sample_date_time_picker.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/menu/activity_drawer.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/menu/drawer.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/drawable/chat_message_shape.xml\" value=\"0.29074074074074074\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/drawable/chat_photo.xml\" value=\"0.2953703703703704\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/drawable/circle.xml\" value=\"0.3101851851851852\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/drawable/ic_camera.xml\" value=\"0.22135416666666666\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/drawable/ic_upload.xml\" value=\"0.22135416666666666\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/drawable/rounded_shape.xml\" value=\"0.3101851851851852\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/drawable/user_message_photo.xml\" value=\"0.2953703703703704\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/activity_chat.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/activity_login.xml\" value=\"0.2957427536231884\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/activity_main.xml\" value=\"0.2957427536231884\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/activity_register.xml\" value=\"0.28940217391304346\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/row_chat.xml\" value=\"0.67\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/row_message.xml\" value=\"0.28940217391304346\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/row_message_others.xml\" value=\"0.2694746376811594\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/row_message_self.xml\" value=\"0.17831813576494426\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/row_message_system.xml\" value=\"0.26268115942028986\" />\r\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/row_pesquisa.xml\" value=\"0.26268115942028986\" />\r\n        <entry key=\"..\\:/Users/Asus/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_search.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Asus/Documents/GitHub/ipca_plus/app/src/main/res/menu/drawer.xml\" value=\"0.128125\" />\r\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/ic_menu_slideshow.xml\" value=\"0.22135416666666666\" />\r\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/round_corner_drawer.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/rounded_shape.xml\" value=\"0.3828125\" />\r\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_drawer_activty.xml\" value=\"0.28306159420289856\" />\r\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/app_bar_main.xml\" value=\"0.28306159420289856\" />\r\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/nav_header_main.xml\" value=\"0.28306159420289856\" />\r\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/menu/activity_drawer.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/menu/drawer.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_chat.xml\" value=\"0.14010416666666667\" />\r\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_drawer_activty.xml\" value=\"0.13020833333333334\" />\r\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_tab.xml\" value=\"0.14010416666666667\" />\r\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/app_bar_main.xml\" value=\"0.13020833333333334\" />\r\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/content_main.xml\" value=\"0.13020833333333334\" />\r\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/fragment_calendar.xml\" value=\"0.264\" />\r\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/fragment_chats.xml\" value=\"0.14010416666666667\" />\r\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/fragment_slideshow.xml\" value=\"0.14010416666666667\" />\r\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/nav_header_main.xml\" value=\"0.13020833333333334\" />\r\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/menu/activity_drawer.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/menu/drawer.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/drawable/chat_photo.xml\" value=\"0.3769230769230769\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/drawable/gradient_shadow.xml\" value=\"0.3769230769230769\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/drawable/ic_video.xml\" value=\"0.3769230769230769\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/drawable/shadow.xml\" value=\"0.3769230769230769\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_add_event.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_calendar.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_chat.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_contacts.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_drawer_activty.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_profile.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_register.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_schedule.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_search.xml\" value=\"0.5\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_tab.xml\" value=\"0.26766304347826086\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/app_bar_main.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/content_main.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/nav_header_main.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_chat.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_pesquisa.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/menu/activity_drawer.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/menu/drawer.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"app/src/main/res/drawable/button_register.xml\" value=\"0.3425925925925926\" />\r\n        <entry key=\"app/src/main/res/drawable/event_shape.xml\" value=\"0.31203703703703706\" />\r\n        <entry key=\"app/src/main/res/drawable/ic_baseline_add_24.xml\" value=\"0.3671875\" />\r\n        <entry key=\"app/src/main/res/drawable/ic_baseline_dehaze_24.xml\" value=\"0.3671875\" />\r\n        <entry key=\"app/src/main/res/drawable/ic_frame_4.xml\" value=\"0.3671875\" />\r\n        <entry key=\"app/src/main/res/drawable/ic_lg_ipca.xml\" value=\"0.36153846153846153\" />\r\n        <entry key=\"app/src/main/res/drawable/pop_up_round_corners.xml\" value=\"0.36153846153846153\" />\r\n        <entry key=\"app/src/main/res/drawable/round_corner_drawer.xml\" value=\"0.21354166666666666\" />\r\n        <entry key=\"app/src/main/res/drawable/rounded_shape.xml\" value=\"0.20208333333333334\" />\r\n        <entry key=\"app/src/main/res/layout/activity_drawer.xml\" value=\"0.35104166666666664\" />\r\n        <entry key=\"app/src/main/res/layout/activity_drawer_activty.xml\" value=\"0.14402173913043478\" />\r\n        <entry key=\"app/src/main/res/layout/activity_login.xml\" value=\"0.19427083333333334\" />\r\n        <entry key=\"app/src/main/res/layout/activity_search.xml\" value=\"0.32563405797101447\" />\r\n        <entry key=\"app/src/main/res/layout/activity_tab.xml\" value=\"0.33\" />\r\n        <entry key=\"app/src/main/res/layout/activity_welcome.xml\" value=\"0.33\" />\r\n        <entry key=\"app/src/main/res/layout/app_bar_drawer.xml\" value=\"0.35104166666666664\" />\r\n        <entry key=\"app/src/main/res/layout/app_bar_main.xml\" value=\"0.1707193515704154\" />\r\n        <entry key=\"app/src/main/res/layout/content_drawer.xml\" value=\"0.35104166666666664\" />\r\n        <entry key=\"app/src/main/res/layout/content_main.xml\" value=\"0.32563405797101447\" />\r\n        <entry key=\"app/src/main/res/layout/fragment_gallery.xml\" value=\"0.35104166666666664\" />\r\n        <entry key=\"app/src/main/res/layout/fragment_home.xml\" value=\"0.35104166666666664\" />\r\n        <entry key=\"app/src/main/res/layout/fragment_official_chats.xml\" value=\"0.32563405797101447\" />\r\n        <entry key=\"app/src/main/res/layout/fragment_tab.xml\" value=\"0.3489583333333333\" />\r\n        <entry key=\"app/src/main/res/layout/nav_header_main.xml\" value=\"0.32563405797101447\" />\r\n        <entry key=\"app/src/main/res/layout/row_chat.xml\" value=\"0.32563405797101447\" />\r\n        <entry key=\"app/src/main/res/menu/activity_drawer.xml\" value=\"0.35104166666666664\" />\r\n        <entry key=\"app/src/main/res/menu/drawer.xml\" value=\"0.325\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/misc.xml b/.idea/misc.xml
----- a/.idea/misc.xml	(revision 68db8e92ec156616c8dd39c656747d5b2c7a2133)
--+++ b/.idea/misc.xml	(date 1640260007432)
--@@ -77,6 +77,7 @@
--         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/round_corner_drawer.xml" value="0.33" />
--         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/rounded_shape.xml" value="0.3828125" />
--         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_drawer_activty.xml" value="0.28306159420289856" />
--+        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_news_web.xml" value="0.2966485507246377" />
--         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/app_bar_main.xml" value="0.28306159420289856" />
--         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/nav_header_main.xml" value="0.28306159420289856" />
--         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/menu/activity_drawer.xml" value="0.36666666666666664" />
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM__Default_Changelist_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM__Default_Changelist_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM__Default_Changelist_.xml	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-+++ /dev/null	(revision 6357a5bbd27af02f311f8311dcf2ebf10c453e1f)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]" date="1640617599712" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 3:06 PM [Default Changelist]" />
--</changelist>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_rebase__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_rebase__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_rebase__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_rebase__Default_Changelist_.xml	(revision 61aecb98de8cc827aadb6472252112d5a0bddc54)
+++ /dev/null	(revision 61aecb98de8cc827aadb6472252112d5a0bddc54)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_rebase_[Default_Changelist]" date="1641230754374" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_rebase_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before rebase [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_03_01_2022_15_56__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_03_01_2022_15_56__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_03_01_2022_15_56__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_03_01_2022_15_56__Default_Changelist_.xml	(revision 61aecb98de8cc827aadb6472252112d5a0bddc54)
+++ /dev/null	(revision 61aecb98de8cc827aadb6472252112d5a0bddc54)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_03_01_2022_15_56_[Default_Changelist]" date="1641225390584" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_03_01_2022_15_56_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 03/01/2022 15:56 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\nunoi\\.android\\avd\\Pixel_5_API_30.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2022-01-01T23:53:04.443341100Z\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision 61aecb98de8cc827aadb6472252112d5a0bddc54)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1641766813339)
@@ -7,11 +7,11 @@
         <deviceKey>
           <Key>
             <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="C:\Users\nunoi\.android\avd\Pixel_5_API_30.avd" />
+            <value value="C:\Users\diogo\.android\avd\Pixel_5_R.avd" />
           </Key>
         </deviceKey>
       </Target>
     </targetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2022-01-01T23:53:04.443341100Z" />
+    <timeTargetWasSelectedWithDropDown value="2022-01-09T22:20:07.031329200Z" />
   </component>
 </project>
\ No newline at end of file
