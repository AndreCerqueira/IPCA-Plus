Index: app/src/main/java/com/singularity/ipcaplus/drawer/DrawerActivty.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.singularity.ipcaplus.drawer\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.WelcomeActivity\r\nimport com.singularity.ipcaplus.utils.PreferenceHelper.email\r\nimport com.singularity.ipcaplus.utils.PreferenceHelper.password\r\nimport com.singularity.ipcaplus.utils.PreferenceHelper.userId\r\nimport com.singularity.ipcaplus.chat.SearchActivity\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.utils.PreferenceHelper\r\nimport com.singularity.ipcaplus.utils.UserLoggedIn\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport kotlin.random.Random\r\nimport androidx.core.view.ViewCompat\r\n\r\nimport androidx.core.app.ActivityOptionsCompat\r\nimport com.singularity.ipcaplus.AddButtonActivity\r\nimport com.singularity.ipcaplus.chat.CreateChatActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityProfileBinding\r\nimport com.singularity.ipcaplus.utils.Backend\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n    private lateinit var binding2: ActivityProfileBinding\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n       // binding2 = ActivityProfileBinding.inflate(layoutInflater)\r\n\r\n        setContentView(binding.root)\r\n\r\n       /* var imageView = binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile)\r\n        var imageView2 = binding2.imageViewProfile.id*/\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            /*val options = ActivityOptionsCompat.makeSceneTransitionAnimation(\r\n                this,\r\n                imageView,\r\n                imageView2.toString()\r\n            )*/\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        Utilis.getFile(this,\"profilePictures/\" + Firebase.auth.uid + \".png\", \"png\") { bitmap ->\r\n            binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setImageBitmap(bitmap)\r\n        }\r\n        if(!UserLoggedIn.name.isNullOrEmpty()){\r\n            val name = Utilis.getFirstAndLastName(UserLoggedIn.name!!)\r\n            binding.navView.getHeaderView(0).findViewById<TextView>(R.id.textView3).text = name\r\n            binding.navView.getHeaderView(0).findViewById<TextView>(R.id.emailTextView).text = UserLoggedIn.email\r\n        }\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Generate key for chats\r\n        val keygen = metaGenrateKey()\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n\r\n            val intent = Intent(this, AddButtonActivity::class.java)\r\n            startActivity(intent)\r\n\r\n            /*\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\",\r\n                keygen\r\n            )\r\n            // Build encryptation data of first message send by the system\r\n            var meta = encryptMeta(\"This is an Alpha Chat, bugs are expected,\" +\r\n                    \" please report them if you found some. Welcome to Singularity!\", keygen)\r\n            val id_amigo = \"Y90PjGQmLsMrxLicWkirOKpPSOx2\"\r\n            val message = Message(\r\n                \"system\",\r\n                meta.toString(),\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n                    db.collection(\"profile\")\r\n                        .document(id_amigo)\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }*/\r\n\r\n        }\r\n\r\n        // Log Out Button\r\n        binding.logoutLayout.setOnClickListener {\r\n\r\n            val prefs = PreferenceHelper.customPreference(this, \"User_data\")\r\n            prefs.password = null\r\n            prefs.email = null\r\n            prefs.userId = null\r\n\r\n            val intent = Intent(this, WelcomeActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n\r\n    /*\r\n        Refresh Activity Content\r\n    */\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        Utilis.getFile(this,\"profilePictures/\" + Firebase.auth.uid!! + \".png\", \"png\") { bitmap ->\r\n            binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setImageBitmap(bitmap)\r\n        }\r\n    }\r\n\r\n\r\n        override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        // Handle item selection\r\n        return when (item.itemId) {\r\n            R.id.search_btn -> {\r\n                val intent = Intent(this, SearchActivity::class.java)\r\n                startActivity(intent)\r\n\r\n                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/singularity/ipcaplus/drawer/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/drawer/DrawerActivty.kt
--- a/app/src/main/java/com/singularity/ipcaplus/drawer/DrawerActivty.kt	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
+++ b/app/src/main/java/com/singularity/ipcaplus/drawer/DrawerActivty.kt	(date 1641230212949)
@@ -1,6 +1,9 @@
 package com.singularity.ipcaplus.drawer
 
+import android.content.BroadcastReceiver
 import android.content.ContentValues
+import android.content.ContentValues.TAG
+import android.content.Context
 import android.content.Intent
 import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
@@ -10,6 +13,7 @@
 import android.view.WindowManager
 import android.widget.ImageView
 import android.widget.TextView
+import android.widget.Toast
 import androidx.drawerlayout.widget.DrawerLayout
 import androidx.navigation.findNavController
 import androidx.navigation.ui.AppBarConfiguration
@@ -33,17 +37,16 @@
 import com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding
 import com.singularity.ipcaplus.models.Chat
 import com.singularity.ipcaplus.models.Message
-import com.singularity.ipcaplus.utils.PreferenceHelper
-import com.singularity.ipcaplus.utils.UserLoggedIn
-import com.singularity.ipcaplus.utils.Utilis
 import kotlin.random.Random
 import androidx.core.view.ViewCompat
 
 import androidx.core.app.ActivityOptionsCompat
+import com.google.android.gms.tasks.OnCompleteListener
+import com.google.firebase.messaging.FirebaseMessaging
 import com.singularity.ipcaplus.AddButtonActivity
 import com.singularity.ipcaplus.chat.CreateChatActivity
 import com.singularity.ipcaplus.databinding.ActivityProfileBinding
-import com.singularity.ipcaplus.utils.Backend
+import com.singularity.ipcaplus.utils.*
 
 
 class DrawerActivty : AppCompatActivity() {
@@ -53,6 +56,29 @@
     private lateinit var binding2: ActivityProfileBinding
     val db = Firebase.firestore
 
+    var notificationReceiver : NotificationReceiver? = null
+
+    inner class NotificationReceiver : BroadcastReceiver() {
+        override fun onReceive(p0: Context?, intent: Intent?) {
+            intent?.extras?.getString(MyFirebaseMessagingService.NOTIFICATION_MESSAGE)?.let {
+                alertNotificatio(this@MainActivity, it)
+            }
+        }
+    }
+
+    override fun onResume() {
+        super.onResume()
+        notificationReceiver = NotificationReceiver()
+        this.registerReceiver(notificationReceiver, IntentFilter(MyFirebaseMessagingService.BROADCAST_NEW_NOTIFICATION))
+    }
+
+    override fun onPause() {
+        super.onPause()
+        notificationReceiver?.let {
+            this.unregisterReceiver(it)
+        }
+    }
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
 
@@ -174,6 +200,22 @@
         setupActionBarWithNavController(navController, appBarConfiguration)
         navView.setupWithNavController(navController)
 
+
+        FirebaseMessaging.getInstance().token.addOnCompleteListener(OnCompleteListener { task ->
+            if (!task.isSuccessful) {
+                Log.w(TAG, "Fetching FCM registration token failed", task.exception)
+                println("------------------------------------ não encontro o token")
+                return@OnCompleteListener
+            }
+
+            // Get new FCM registration token
+            val token = task.result
+
+            // Log and toast
+            val msg = "Token$token"
+            Log.d(TAG, msg)
+            Toast.makeText(baseContext, msg, Toast.LENGTH_SHORT).show()
+        })
     }
 
 
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]" date="1640607045965" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 12:10 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
@@ -1,168 +0,0 @@
-Index: app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.FirebaseUser\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAES\r\nimport com.singularity.ipcaplus.cryptography.encrypt\r\nimport com.singularity.ipcaplus.databinding.ActivityRegisterBinding\r\n\r\nclass RegisterActivity : AppCompatActivity() {\r\n    private lateinit var auth: FirebaseAuth\r\n    private lateinit var binding: ActivityRegisterBinding\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_login)\r\n\r\n        binding = ActivityRegisterBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        auth = Firebase.auth\r\n\r\n\r\n        binding.buttonRegister.setOnClickListener {\r\n            val email : String = binding.editTextEmail.text.toString()\r\n            val password : String = binding.editTextTextPassword.text.toString()\r\n\r\n\r\n            auth.createUserWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(this) { task ->\r\n                    if (task.isSuccessful) {\r\n                        // Sign in success, update UI with the signed-in user's information\r\n                        Log.d(TAG, \"createUserWithEmail:success\")\r\n                        val user = auth.currentUser\r\n                        emailVerification()\r\n                        startActivity(Intent(this, LoginActivity::class.java ))\r\n                    } else {\r\n                        // If sign in fails, display a message to the user.\r\n                        Log.w(TAG, \"createUserWithEmail:failure\", task.exception)\r\n                        Toast.makeText(baseContext, \"Authentication failed.\",\r\n                            Toast.LENGTH_SHORT).show()\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    private fun emailVerification() {\r\n\r\n        auth.currentUser?.sendEmailVerification()\r\n            ?.addOnCompleteListener { task ->\r\n                if (task.isSuccessful) {\r\n                    // below message changed and user is navigated to Sign In activity\r\n                    val user = auth.currentUser\r\n                    Toast.makeText(\r\n                        this, \"Sign Up successful. Verification link sent to the Email address\",\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }\r\n            }\r\n\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt b/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt
---- a/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt	(revision 259ef520c64e84cee5b29ce2aa11b4d2c88df187)
-+++ b/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt	(date 1640617365737)
-@@ -1,17 +1,15 @@
- package com.singularity.ipcaplus
- 
--import android.content.ContentValues.TAG
-+import android.content.ContentValues
- import android.content.Intent
--import androidx.appcompat.app.AppCompatActivity
- import android.os.Bundle
- import android.util.Log
- import android.widget.Toast
-+import androidx.appcompat.app.AppCompatActivity
-+import com.google.android.material.snackbar.Snackbar
- import com.google.firebase.auth.FirebaseAuth
--import com.google.firebase.auth.FirebaseUser
- import com.google.firebase.auth.ktx.auth
- import com.google.firebase.ktx.Firebase
--import com.singularity.ipcaplus.cryptography.decryptWithAES
--import com.singularity.ipcaplus.cryptography.encrypt
- import com.singularity.ipcaplus.databinding.ActivityRegisterBinding
- 
- class RegisterActivity : AppCompatActivity() {
-@@ -33,22 +31,27 @@
-             val email : String = binding.editTextEmail.text.toString()
-             val password : String = binding.editTextTextPassword.text.toString()
- 
--
--            auth.createUserWithEmailAndPassword(email, password)
--                .addOnCompleteListener(this) { task ->
--                    if (task.isSuccessful) {
--                        // Sign in success, update UI with the signed-in user's information
--                        Log.d(TAG, "createUserWithEmail:success")
--                        val user = auth.currentUser
--                        emailVerification()
--                        startActivity(Intent(this, LoginActivity::class.java ))
--                    } else {
--                        // If sign in fails, display a message to the user.
--                        Log.w(TAG, "createUserWithEmail:failure", task.exception)
--                        Toast.makeText(baseContext, "Authentication failed.",
--                            Toast.LENGTH_SHORT).show()
-+            val emailDomain = Utilis.getEmailDomain(email)
-+            if(emailDomain != "alunos.ipca.pt" && emailDomain != "ipca.pt"){
-+                Snackbar.make(binding.root,
-+                    "You need to Sign Up with (ipca.pt) email!", Snackbar.LENGTH_SHORT).show()
-+            }else{
-+                auth.createUserWithEmailAndPassword(email, password)
-+                    .addOnCompleteListener(this) { task ->
-+                        if (task.isSuccessful) {
-+                            // Sign in success, update UI with the signed-in user's information
-+                            Log.d(ContentValues.TAG, "createUserWithEmail:success")
-+                            val user = auth.currentUser
-+                            emailVerification()
-+                            startActivity(Intent(this, LoginActivity::class.java ))
-+                        } else {
-+                            // If sign in fails, display a message to the user.
-+                            Log.w(ContentValues.TAG, "createUserWithEmail:failure", task.exception)
-+                            Toast.makeText(baseContext, "Authentication failed.",
-+                                Toast.LENGTH_SHORT).show()
-+                        }
-                     }
--                }
-+            }
-         }
-     }
- 
-Index: app/src/main/java/com/singularity/ipcaplus/Backend.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus\r\n\r\nimport android.graphics.Color\r\nimport com.github.sundeepk.compactcalendarview.domain.Event\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.Query\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.models.*\r\n\r\nobject Backend {\r\n\r\n    val db = Firebase.firestore\r\n\r\n    /*\r\n       ------------------------------------------------ Events ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all events during the month in the firebase to an list\r\n       @month = selected month\r\n       @callBack = return the list\r\n    */\r\n    fun getAllMonthEvents(month: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        // Get all user chat ids\r\n        val chatIds = arrayListOf<String>()\r\n        getAllUserChatIds {\r\n            chatIds.addAll(it)\r\n\r\n            // Search in all chats\r\n            for (id in chatIds) {\r\n                db.collection(\"chat\")\r\n                    .document(id)\r\n                    .collection(\"event\")\r\n                    .addSnapshotListener { documents, _ ->\r\n\r\n                        documents?.let {\r\n\r\n                            for (document in documents) {\r\n                                val event = EventCalendar.fromHash(document)\r\n                                event.id = document.id\r\n\r\n                                val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                                if (month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                                    events.add(event)\r\n                                }\r\n                            }\r\n                            callBack(events)\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun getAllUserChatIds(callBack: (List<String>)->Unit) {\r\n\r\n        val chatIds = arrayListOf<String>()\r\n\r\n        // Get Group Chats Ids\r\n        db.collection(\"profile\").document(Firebase.auth.currentUser!!.uid).collection(\"chat\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        chatIds.add(document.id)\r\n                    }\r\n\r\n                    callBack(chatIds)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the month in the firebase to an list\r\n       @month = selected month\r\n       @callBack = return the list\r\n    */\r\n    fun getAllChatMonthEvents(month: String, chat_id: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chat_id)\r\n            .collection(\"event\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val event = EventCalendar.fromHash(document)\r\n                        event.id = document.id\r\n\r\n                        val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                        if (month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                            events.add(event)\r\n                        }\r\n                    }\r\n\r\n                    callBack(events)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the day in the firebase to an list\r\n       @day = selected day\r\n       @callBack = return the list\r\n    */\r\n    fun getAllChatMonthDayEvents(month: String, day: Int, chat_id: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chat_id)\r\n            .collection(\"event\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val event = EventCalendar.fromHash(document)\r\n                        event.id = document.id\r\n\r\n                        val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                        if (day == Utilis.getDay(date).toInt() && month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                            events.add(event)\r\n                        }\r\n                    }\r\n\r\n                    callBack(events)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the day in the firebase to an list\r\n       @day = selected day\r\n       @callBack = return the list\r\n    */\r\n    fun getAllMonthDayEvents(month: String, day: Int, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        // Get all user chat ids\r\n        val chatIds = arrayListOf<String>()\r\n        getAllUserChatIds {\r\n            chatIds.addAll(it)\r\n\r\n            // Search in all chats\r\n            for (id in chatIds) {\r\n                db.collection(\"chat\")\r\n                    .document(id)\r\n                    .collection(\"event\")\r\n                    .addSnapshotListener { documents, _ ->\r\n\r\n                        documents?.let {\r\n\r\n                            for (document in documents) {\r\n                                val event = EventCalendar.fromHash(document)\r\n                                event.id = document.id\r\n\r\n                                val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                                if (day == Utilis.getDay(date).toInt() && month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                                    events.add(event)\r\n                                }\r\n                            }\r\n\r\n                            callBack(events)\r\n                        }\r\n\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun deleteEvent(chatID: String, eventID: String) {\r\n\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"event\")\r\n            .document(eventID)\r\n            .delete()\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Schedule ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all events in the firebase to an list\r\n       @callBack = return the list\r\n    */\r\n    fun getDayCourseSubjects(day: String, courseId: String, callBack: (List<Subject>)->Unit) {\r\n\r\n        val subjects = arrayListOf<Subject>()\r\n        val subjectsWithBreaks = arrayListOf<Subject>()\r\n\r\n        db.collection(\"course\").document(courseId).collection(\"subject\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n\r\n                    // Add every subject to the list\r\n                    for (document in documents) {\r\n                        val subject = Subject.fromHash(document)\r\n                        if (day == subject.day) {\r\n                            subjects.add(subject)\r\n                        }\r\n                    }\r\n\r\n                    // Order the subjects by time\r\n                    for (i in 0 until subjects.size) {\r\n                        for (j in 0 until subjects.size - 1) {\r\n\r\n                            if (Utilis.convertHoursStringToInt(subjects[j].start_time) > Utilis.convertHoursStringToInt(subjects[j+1].start_time)) {\r\n                                val temp = subjects[j]\r\n                                subjects[j] = subjects[j + 1]\r\n                                subjects[j + 1] = temp\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Add Break Times Between Classes\r\n                    for (i in 0 until subjects.size) {\r\n                        if (i % 2 == 0) {\r\n                            subjectsWithBreaks.add(subjects[i])\r\n                        }\r\n                        else {\r\n                            val diff = Utilis.convertHoursStringToInt(subjects[i].start_time) - Utilis.convertHoursStringToInt(subjects[i-1].end_time)\r\n                            subjectsWithBreaks.add(Subject(\"breaktime\", diff.toString()))\r\n                            subjectsWithBreaks.add(subjects[i])\r\n                        }\r\n                    }\r\n\r\n                    callBack(subjectsWithBreaks)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns the user course by callback\r\n       @id = user uid\r\n    */\r\n    fun getUserCourse(uid: String, callBack:(String)->Unit) {\r\n\r\n        db.collection(\"profile\")\r\n            .document(uid)\r\n            .collection(\"course\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    var courseId = \"\"\r\n                    for (document in documents)\r\n                        courseId = document.id\r\n\r\n                    callBack(courseId)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Contacts ------------------------------------------------\r\n    */\r\n    /*\r\n       This function returns all contacts in the firebase to an list\r\n       @callBack = return the list\r\n    */\r\n    fun getAllContacts(callBack: (List<Contact>)->Unit) {\r\n\r\n        val contacts = arrayListOf<Contact>()\r\n\r\n        db.collection(\"contacts\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val contact = Contact.fromHash(document)\r\n                        contacts.add(contact)\r\n                    }\r\n\r\n                    callBack(contacts)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Chats ------------------------------------------------\r\n    */\r\n    /*\r\n    /*\r\n       This function returns chats based on given type\r\n       @callBack = return the list\r\n    */\r\n    fun getChatByType(type: String ,callBack: (List<Chat>, List<String>)->Unit) {\r\n\r\n        val chats = arrayListOf<Chat>()\r\n        val chatIds = arrayListOf<String>()\r\n\r\n        db.collection(\"profile\").document(\"${Firebase.auth.currentUser!!.uid}\").collection(\"chat\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        val chat = Chat.fromHash(document)\r\n                        if (type == chat.type) {\r\n                            chats.add(chat)\r\n                            chatIds.add(document.id)\r\n                        }\r\n                    }\r\n\r\n                    callBack(chats, chatIds)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n    */\r\n\r\n    /*\r\n       This function returns last chat message by chat id\r\n       @callBack = return the list\r\n    */\r\n    fun getLastMessageByChatID(chatID: String, callBack: (Message?)->Unit) {\r\n\r\n        var message : Message? = null\r\n\r\n        db.collection(\"chat\").document(\"${chatID}\").collection(\"message\")\r\n            .orderBy(\"time\", Query.Direction.DESCENDING).limit(1)\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        message = Message.fromHash(document)\r\n                        }\r\n                    }\r\n\r\n                    callBack(message)\r\n                }\r\n\r\n    }\r\n\r\n\r\n    fun getChatAdminIds(chatID: String, callBack: (List<String>)->Unit) {\r\n\r\n        val adminIds = arrayListOf<String>()\r\n\r\n        // Get Group Chats Ids\r\n        db.collection(\"chat\").document(chatID).collection(\"admin\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        adminIds.add(document.id)\r\n                    }\r\n\r\n                    callBack(adminIds)\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/Backend.kt b/app/src/main/java/com/singularity/ipcaplus/Backend.kt
---- a/app/src/main/java/com/singularity/ipcaplus/Backend.kt	(revision 259ef520c64e84cee5b29ce2aa11b4d2c88df187)
-+++ b/app/src/main/java/com/singularity/ipcaplus/Backend.kt	(date 1640617597444)
-@@ -1,12 +1,13 @@
- package com.singularity.ipcaplus
- 
--import android.graphics.Color
--import com.github.sundeepk.compactcalendarview.domain.Event
- import com.google.firebase.auth.ktx.auth
- import com.google.firebase.firestore.Query
- import com.google.firebase.firestore.ktx.firestore
- import com.google.firebase.ktx.Firebase
--import com.singularity.ipcaplus.models.*
-+import com.singularity.ipcaplus.models.Contact
-+import com.singularity.ipcaplus.models.EventCalendar
-+import com.singularity.ipcaplus.models.Message
-+import com.singularity.ipcaplus.models.Subject
- 
- object Backend {
- 
-@@ -375,5 +376,27 @@
- 
-     }
- 
-+    /*
-+       ------------------------------------------------ Register Manipulation ------------------------------------------------
-+    */
-+
-+    fun getIpcaData(email: String, callBack: (Message?)->Unit) {
-+
-+        var message : Message? = null
-+
-+        db.collection("ipca_data")
-+            .addSnapshotListener { documents, _ ->
-+                documents?.let {
-+                    for (document in documents) {
-+                        message = Message.fromHash(document)
-+                    }
-+                }
-+
-+                callBack(message)
-+            }
-+
-+    }
-+
-+
- 
- }
-\ No newline at end of file
-Index: app/src/main/java/com/singularity/ipcaplus/Utilis.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport androidx.annotation.RequiresApi\r\nimport java.io.IOException\r\nimport java.text.SimpleDateFormat\r\nimport java.time.LocalDate\r\nimport java.util.*\r\nimport java.util.regex.Pattern\r\n\r\nobject  Utilis {\r\n\r\n    /*\r\n        This function return the current month id\r\n     */\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getCurrentMonthId(): Int {\r\n\r\n        val c = LocalDate.now()\r\n        val strArray = Pattern.compile(\"-\").split(c.toString())\r\n\r\n        return strArray[1].toInt()\r\n    }\r\n\r\n    /*\r\n        This function return the current year id\r\n     */\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getCurrentYear(): String {\r\n\r\n        val c = LocalDate.now()\r\n        val strArray = Pattern.compile(\"-\").split(c.toString())\r\n\r\n        return strArray[0]\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getYearByCalendarId(id: Int): Int {\r\n\r\n        var count = id\r\n        var result = 2021 - 121\r\n\r\n        while (count > 0) {\r\n            count -= 1\r\n            result ++\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    /*\r\n        This function return the month value in string by an id\r\n        @month = month id\r\n     */\r\n    fun getMonthById(month: Int): String {\r\n        return when (month) {\r\n            1 -> \"Janeiro\"\r\n            2 -> \"Fevereiro\"\r\n            3 -> \"Março\"\r\n            4 -> \"Abril\"\r\n            5 -> \"Maio\"\r\n            6 -> \"Junho\"\r\n            7 -> \"Julho\"\r\n            8 -> \"Agosto\"\r\n            9 -> \"Setembro\"\r\n            10 -> \"Outubro\"\r\n            11 -> \"Novembro\"\r\n            12 -> \"Dezembro\"\r\n            else -> \"None\"\r\n        }\r\n    }\r\n\r\n    fun convertHoursStringToInt(strVal: String): Int {\r\n        val strArray = Pattern.compile(\":\").split(strVal)\r\n        val result = strArray[0] + strArray[1]\r\n        return result.toInt()\r\n    }\r\n\r\n    fun getDate(milliSeconds: Long, dateFormat: String?): String {\r\n        // Create a DateFormatter object for displaying date in specified format.\r\n        val formatter = SimpleDateFormat(dateFormat)\r\n\r\n        // Create a calendar object that will convert the date and time value in milliseconds to date.\r\n        val calendar: Calendar = Calendar.getInstance()\r\n        calendar.timeInMillis = milliSeconds\r\n        return formatter.format(calendar.time)\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the day\r\n        @date = default date\r\n     */\r\n    fun getDay(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\"T\").split(strArray[2])\r\n\r\n        return strArray2[0]\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the month in text\r\n        @date = default date\r\n     */\r\n    fun getMonth(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n\r\n        return strArray[1].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the year in text\r\n        @date = default date\r\n     */\r\n    fun getYear(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n\r\n        return strArray[0].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the Hours in text\r\n        @date = default date\r\n     */\r\n    fun getHours(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"T\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\":\").split(strArray[1])\r\n\r\n        return strArray2[0].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the Minutes in text\r\n        @date = default date\r\n     */\r\n    fun getMinutes(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"T\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\":\").split(strArray[1])\r\n\r\n        return strArray2[1].toString()\r\n    }\r\n\r\n\r\n    fun getJsonDataFromAsset(context: Context, fileName: String): String? {\r\n        val jsonString: String\r\n        try {\r\n            jsonString = context.assets.open(fileName).bufferedReader().use { it.readText() }\r\n        } catch (ioException: IOException) {\r\n            ioException.printStackTrace()\r\n            return null\r\n        }\r\n        return jsonString\r\n    }\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/Utilis.kt b/app/src/main/java/com/singularity/ipcaplus/Utilis.kt
---- a/app/src/main/java/com/singularity/ipcaplus/Utilis.kt	(revision 259ef520c64e84cee5b29ce2aa11b4d2c88df187)
-+++ b/app/src/main/java/com/singularity/ipcaplus/Utilis.kt	(date 1640616340275)
-@@ -155,6 +155,9 @@
-         return strArray2[1].toString()
-     }
- 
-+    /*
-+        This function get the buffer with the name of filename on assets folder
-+     */
- 
-     fun getJsonDataFromAsset(context: Context, fileName: String): String? {
-         val jsonString: String
-@@ -167,4 +170,16 @@
-         return jsonString
-     }
- 
-+    /*
-+        This function gets the domain of email
-+        split remove the @ and make the array like this -> [a20115][alunos.ipca.pt]
-+     */
-+    fun getEmailDomain(email: String) : String{
-+        val strArray = Pattern.compile("@").split(email)
-+        val result= strArray[1]
-+
-+        return result.toString()
-+
-+    }
-+
- }
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
@@ -1,47 +0,0 @@
-Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport java.util.Base64\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.lang.StringBuilder\r\nimport java.util.Base64.getEncoder\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.crypto.KeyGenerator\r\nimport javax.crypto.SecretKey\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n\r\n        /*val message = \"Hello Welcome to Solanium Dr.Diogo\"\r\n        var meta = encryptMeta(message, keygen)\r\n        println(meta)\r\n\r\n        val message_decripted = decryptWithAESmeta(keygen, meta)\r\n        println(message_decripted)*/\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n\r\n            /*val keygen = metaGenrateKey()\r\n\r\n            val intent = Intent(this, ChatActivity::class.java)\r\n            intent.putExtra(\"keygen\", keygen)\r\n            startActivity(intent)*/\r\n\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n            )\r\n\r\n            var meta = encryptMeta(\"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\", \"662ede816988e58fb6d057d9d85605e0\")\r\n            val message = Message(\r\n                \"system\",\r\n                meta.toString(),\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
---- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
-+++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640484576403)
-@@ -31,11 +31,8 @@
- import com.singularity.ipcaplus.models.Chat
- import com.singularity.ipcaplus.models.Message
- import com.singularity.ipcaplus.profile.ProfileActivity
--import java.lang.StringBuilder
--import java.util.Base64.getEncoder
- import java.util.concurrent.TimeUnit
- import javax.crypto.KeyGenerator
--import javax.crypto.SecretKey
- import kotlin.random.Random
- 
- 
-Index: .idea/deploymentTargetDropDown.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
---- a/.idea/deploymentTargetDropDown.xml	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
-+++ b/.idea/deploymentTargetDropDown.xml	(date 1640484631324)
-@@ -7,11 +7,11 @@
-         <deviceKey>
-           <Key>
-             <type value="VIRTUAL_DEVICE_PATH" />
--            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
-+            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
-           </Key>
-         </deviceKey>
-       </Target>
-     </targetSelectedWithDropDown>
--    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
-+    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM__Default_Changelist_.xml	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]" date="1640607098047" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 12:11 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
@@ -1,115 +0,0 @@
-Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.PreferenceHelper.email\r\nimport com.singularity.ipcaplus.PreferenceHelper.password\r\nimport com.singularity.ipcaplus.PreferenceHelper.userId\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.util.concurrent.TimeUnit\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n\r\n            )\r\n            val message = Message(\r\n                \"system\",\r\n                \"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\",\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n\r\n        // Log Out Button\r\n        binding.logoutLayout.setOnClickListener {\r\n\r\n            val prefs = PreferenceHelper.customPreference(this, \"User_data\")\r\n            prefs.password = null\r\n            prefs.email = null\r\n            prefs.userId = null\r\n\r\n            val intent = Intent(this, WelcomeActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
---- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision 94adac9c4d1446b5b44892110de1ee705a5ef903)
-+++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640607043249)
-@@ -130,6 +130,7 @@
-         setupActionBarWithNavController(navController, appBarConfiguration)
-         navView.setupWithNavController(navController)
- 
-+
-     }
- 
-     override fun onCreateOptionsMenu(menu: Menu): Boolean {
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
-new file mode 100644
---- /dev/null	(date 1640603575056)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch	(date 1640603575056)
-@@ -0,0 +1,47 @@
-+Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport java.util.Base64\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.lang.StringBuilder\r\nimport java.util.Base64.getEncoder\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.crypto.KeyGenerator\r\nimport javax.crypto.SecretKey\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n\r\n        /*val message = \"Hello Welcome to Solanium Dr.Diogo\"\r\n        var meta = encryptMeta(message, keygen)\r\n        println(meta)\r\n\r\n        val message_decripted = decryptWithAESmeta(keygen, meta)\r\n        println(message_decripted)*/\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n\r\n            /*val keygen = metaGenrateKey()\r\n\r\n            val intent = Intent(this, ChatActivity::class.java)\r\n            intent.putExtra(\"keygen\", keygen)\r\n            startActivity(intent)*/\r\n\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n            )\r\n\r\n            var meta = encryptMeta(\"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\", \"662ede816988e58fb6d057d9d85605e0\")\r\n            val message = Message(\r\n                \"system\",\r\n                meta.toString(),\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
-+--- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
-++++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640484576403)
-+@@ -31,11 +31,8 @@
-+ import com.singularity.ipcaplus.models.Chat
-+ import com.singularity.ipcaplus.models.Message
-+ import com.singularity.ipcaplus.profile.ProfileActivity
-+-import java.lang.StringBuilder
-+-import java.util.Base64.getEncoder
-+ import java.util.concurrent.TimeUnit
-+ import javax.crypto.KeyGenerator
-+-import javax.crypto.SecretKey
-+ import kotlin.random.Random
-+ 
-+ 
-+Index: .idea/deploymentTargetDropDown.xml
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
-+--- a/.idea/deploymentTargetDropDown.xml	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
-++++ b/.idea/deploymentTargetDropDown.xml	(date 1640484631324)
-+@@ -7,11 +7,11 @@
-+         <deviceKey>
-+           <Key>
-+             <type value="VIRTUAL_DEVICE_PATH" />
-+-            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
-++            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
-+           </Key>
-+         </deviceKey>
-+       </Target>
-+     </targetSelectedWithDropDown>
-+-    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
-++    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
-+   </component>
-+ </project>
-+\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
-new file mode 100644
---- /dev/null	(date 1640603694749)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml	(date 1640603694749)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]" date="1640603683316" recycled="true" deleted="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 11:12 AM [Default Changelist]" />
-+</changelist>
-\ No newline at end of file
-Index: .idea/deploymentTargetDropDown.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
---- a/.idea/deploymentTargetDropDown.xml	(revision 94adac9c4d1446b5b44892110de1ee705a5ef903)
-+++ b/.idea/deploymentTargetDropDown.xml	(date 1640603683277)
-@@ -7,11 +7,11 @@
-         <deviceKey>
-           <Key>
-             <type value="VIRTUAL_DEVICE_PATH" />
--            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
-+            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
-           </Key>
-         </deviceKey>
-       </Target>
-     </targetSelectedWithDropDown>
--    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
-+    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_11_PM_[Default_Changelist]/shelved.patch	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
@@ -1,255 +0,0 @@
-Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.PreferenceHelper.email\r\nimport com.singularity.ipcaplus.PreferenceHelper.password\r\nimport com.singularity.ipcaplus.PreferenceHelper.userId\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.util.concurrent.TimeUnit\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n\r\n            )\r\n            val message = Message(\r\n                \"system\",\r\n                \"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\",\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n\r\n        // Log Out Button\r\n        binding.logoutLayout.setOnClickListener {\r\n\r\n            val prefs = PreferenceHelper.customPreference(this, \"User_data\")\r\n            prefs.password = null\r\n            prefs.email = null\r\n            prefs.userId = null\r\n\r\n            val intent = Intent(this, WelcomeActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
---- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision 8dc1056a94ce651214eaf46bac161cbcb2a45bf0)
-+++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640607045782)
-@@ -130,6 +130,7 @@
-         setupActionBarWithNavController(navController, appBarConfiguration)
-         navView.setupWithNavController(navController)
- 
-+
-     }
- 
-     override fun onCreateOptionsMenu(menu: Menu): Boolean {
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml
-new file mode 100644
---- /dev/null	(date 1640607060734)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM__Default_Changelist_.xml	(date 1640607060734)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]" date="1640607045965" recycled="true" deleted="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 12:10 PM [Default Changelist]" />
-+</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
-new file mode 100644
---- /dev/null	(date 1640607060741)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml	(date 1640607060741)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]" date="1640603683316" recycled="true" deleted="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 11:12 AM [Default Changelist]" />
-+</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
-new file mode 100644
---- /dev/null	(date 1640607045791)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch	(date 1640607045791)
-@@ -0,0 +1,47 @@
-+Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport java.util.Base64\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.lang.StringBuilder\r\nimport java.util.Base64.getEncoder\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.crypto.KeyGenerator\r\nimport javax.crypto.SecretKey\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n\r\n        /*val message = \"Hello Welcome to Solanium Dr.Diogo\"\r\n        var meta = encryptMeta(message, keygen)\r\n        println(meta)\r\n\r\n        val message_decripted = decryptWithAESmeta(keygen, meta)\r\n        println(message_decripted)*/\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n\r\n            /*val keygen = metaGenrateKey()\r\n\r\n            val intent = Intent(this, ChatActivity::class.java)\r\n            intent.putExtra(\"keygen\", keygen)\r\n            startActivity(intent)*/\r\n\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n            )\r\n\r\n            var meta = encryptMeta(\"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\", \"662ede816988e58fb6d057d9d85605e0\")\r\n            val message = Message(\r\n                \"system\",\r\n                meta.toString(),\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
-+--- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
-++++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640484576403)
-+@@ -31,11 +31,8 @@
-+ import com.singularity.ipcaplus.models.Chat
-+ import com.singularity.ipcaplus.models.Message
-+ import com.singularity.ipcaplus.profile.ProfileActivity
-+-import java.lang.StringBuilder
-+-import java.util.Base64.getEncoder
-+ import java.util.concurrent.TimeUnit
-+ import javax.crypto.KeyGenerator
-+-import javax.crypto.SecretKey
-+ import kotlin.random.Random
-+ 
-+ 
-+Index: .idea/deploymentTargetDropDown.xml
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
-+--- a/.idea/deploymentTargetDropDown.xml	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
-++++ b/.idea/deploymentTargetDropDown.xml	(date 1640484631324)
-+@@ -7,11 +7,11 @@
-+         <deviceKey>
-+           <Key>
-+             <type value="VIRTUAL_DEVICE_PATH" />
-+-            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
-++            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
-+           </Key>
-+         </deviceKey>
-+       </Target>
-+     </targetSelectedWithDropDown>
-+-    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
-++    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
-+   </component>
-+ </project>
-+\ No newline at end of file
-Index: .idea/deploymentTargetDropDown.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
---- a/.idea/deploymentTargetDropDown.xml	(revision 8dc1056a94ce651214eaf46bac161cbcb2a45bf0)
-+++ b/.idea/deploymentTargetDropDown.xml	(date 1640607045802)
-@@ -7,11 +7,11 @@
-         <deviceKey>
-           <Key>
-             <type value="VIRTUAL_DEVICE_PATH" />
--            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
-+            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
-           </Key>
-         </deviceKey>
-       </Target>
-     </targetSelectedWithDropDown>
--    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
-+    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
-   </component>
- </project>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch
-new file mode 100644
---- /dev/null	(date 1640607045101)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_12_10_PM_[Default_Changelist]/shelved.patch	(date 1640607045101)
-@@ -0,0 +1,115 @@
-+Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.PreferenceHelper.email\r\nimport com.singularity.ipcaplus.PreferenceHelper.password\r\nimport com.singularity.ipcaplus.PreferenceHelper.userId\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.util.concurrent.TimeUnit\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n\r\n            )\r\n            val message = Message(\r\n                \"system\",\r\n                \"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\",\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n\r\n        // Log Out Button\r\n        binding.logoutLayout.setOnClickListener {\r\n\r\n            val prefs = PreferenceHelper.customPreference(this, \"User_data\")\r\n            prefs.password = null\r\n            prefs.email = null\r\n            prefs.userId = null\r\n\r\n            val intent = Intent(this, WelcomeActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
-+--- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision 94adac9c4d1446b5b44892110de1ee705a5ef903)
-++++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640607043249)
-+@@ -130,6 +130,7 @@
-+         setupActionBarWithNavController(navController, appBarConfiguration)
-+         navView.setupWithNavController(navController)
-+ 
-++
-+     }
-+ 
-+     override fun onCreateOptionsMenu(menu: Menu): Boolean {
-+Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch
-+new file mode 100644
-+--- /dev/null	(date 1640603575056)
-++++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch	(date 1640603575056)
-+@@ -0,0 +1,47 @@
-++Index: app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
-++IDEA additional info:
-++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-++<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport java.util.Base64\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.navigateUp\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.calendar.AddEventActivity\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityDrawerActivtyBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.profile.ProfileActivity\r\nimport java.lang.StringBuilder\r\nimport java.util.Base64.getEncoder\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.crypto.KeyGenerator\r\nimport javax.crypto.SecretKey\r\nimport kotlin.random.Random\r\n\r\n\r\nclass DrawerActivty : AppCompatActivity() {\r\n\r\n    private lateinit var appBarConfiguration: AppBarConfiguration\r\n    private lateinit var binding: ActivityDrawerActivtyBinding\r\n\r\n    val db = Firebase.firestore\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityDrawerActivtyBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.navView.getHeaderView(0).findViewById<ImageView>(R.id.imageView_profile).setOnClickListener {\r\n\r\n            val intent = Intent(this, ProfileActivity::class.java)\r\n            startActivity(intent)\r\n\r\n        }\r\n\r\n        //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n\r\n        /*val message = \"Hello Welcome to Solanium Dr.Diogo\"\r\n        var meta = encryptMeta(message, keygen)\r\n        println(meta)\r\n\r\n        val message_decripted = decryptWithAESmeta(keygen, meta)\r\n        println(message_decripted)*/\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar)\r\n        window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n            WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n\r\n        binding.appBarMain.fabAddChat.setOnClickListener { view ->\r\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null).show()\r\n        }\r\n        val drawerLayout: DrawerLayout = binding.drawerLayout\r\n        val navView: NavigationView = binding.navView\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        val stampCurrent = System.currentTimeMillis()\r\n        val stampSec = TimeUnit.MILLISECONDS.toSeconds(stampCurrent)\r\n        val stampNano = TimeUnit.MILLISECONDS.toNanos(stampCurrent).toInt()\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        appBarConfiguration = AppBarConfiguration(\r\n            setOf(\r\n                R.id.nav_home\r\n            ), drawerLayout\r\n        )\r\n\r\n        // Criação de Chat\r\n        binding.appBarMain.fabAddChat.setOnClickListener {\r\n\r\n            /*val keygen = metaGenrateKey()\r\n\r\n            val intent = Intent(this, ChatActivity::class.java)\r\n            intent.putExtra(\"keygen\", keygen)\r\n            startActivity(intent)*/\r\n\r\n            val chat = Chat(\r\n                \"Chat Teste \" + Random.nextInt(256),\r\n                \"chat\"\r\n            )\r\n\r\n            var meta = encryptMeta(\"This is an Alpha Chat, bugs are expected, please report them if you found some. Welcome to Singularity!\", \"662ede816988e58fb6d057d9d85605e0\")\r\n            val message = Message(\r\n                \"system\",\r\n                meta.toString(),\r\n                \"2021-12-22\",\r\n                Timestamp.now(),\r\n                \"\"\r\n\r\n            )\r\n            db.collection(\"chat\")\r\n                .add(chat.toHash())\r\n                .addOnSuccessListener { documentReference ->\r\n                    db.collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .collection(\"message\")\r\n                        .add(message.toHash())\r\n                    db.collection(\"profile\")\r\n                        .document(\"${Firebase.auth.currentUser!!.uid}\")\r\n                        .collection(\"chat\")\r\n                        .document(\"${documentReference.id}\")\r\n                        .set(chat)\r\n\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                }\r\n\r\n        }\r\n        // Passing each fragment ID as a set of Ids\r\n        setupActionBarWithNavController(navController, appBarConfiguration)\r\n        navView.setupWithNavController(navController)\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        menuInflater.inflate(R.menu.drawer, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        val navController = findNavController(R.id.nav_host_fragment_content_main)\r\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    }\r\n}
-++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-++<+>UTF-8
-++===================================================================
-++diff --git a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt
-++--- a/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
-+++++ b/app/src/main/java/com/singularity/ipcaplus/DrawerActivty.kt	(date 1640484576403)
-++@@ -31,11 +31,8 @@
-++ import com.singularity.ipcaplus.models.Chat
-++ import com.singularity.ipcaplus.models.Message
-++ import com.singularity.ipcaplus.profile.ProfileActivity
-++-import java.lang.StringBuilder
-++-import java.util.Base64.getEncoder
-++ import java.util.concurrent.TimeUnit
-++ import javax.crypto.KeyGenerator
-++-import javax.crypto.SecretKey
-++ import kotlin.random.Random
-++ 
-++ 
-++Index: .idea/deploymentTargetDropDown.xml
-++IDEA additional info:
-++Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-++<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
-++Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-++<+>UTF-8
-++===================================================================
-++diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
-++--- a/.idea/deploymentTargetDropDown.xml	(revision db6f0662753bfe0d8d9a8102dae42e6ff910c141)
-+++++ b/.idea/deploymentTargetDropDown.xml	(date 1640484631324)
-++@@ -7,11 +7,11 @@
-++         <deviceKey>
-++           <Key>
-++             <type value="VIRTUAL_DEVICE_PATH" />
-++-            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
-+++            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
-++           </Key>
-++         </deviceKey>
-++       </Target>
-++     </targetSelectedWithDropDown>
-++-    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
-+++    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
-++   </component>
-++ </project>
-++\ No newline at end of file
-+Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
-+new file mode 100644
-+--- /dev/null	(date 1640603694749)
-++++ b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml	(date 1640603694749)
-+@@ -0,0 +1,4 @@
-++<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]" date="1640603683316" recycled="true" deleted="true">
-++  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch" />
-++  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 11:12 AM [Default Changelist]" />
-++</changelist>
-+\ No newline at end of file
-+Index: .idea/deploymentTargetDropDown.xml
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\diogo\\.android\\avd\\Pixel_5_API_27.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2021-12-20T17:50:43.965935700Z\" />\r\n  </component>\r\n</project>
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
-+--- a/.idea/deploymentTargetDropDown.xml	(revision 94adac9c4d1446b5b44892110de1ee705a5ef903)
-++++ b/.idea/deploymentTargetDropDown.xml	(date 1640603683277)
-+@@ -7,11 +7,11 @@
-+         <deviceKey>
-+           <Key>
-+             <type value="VIRTUAL_DEVICE_PATH" />
-+-            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27.avd" />
-++            <value value="C:\Users\diogo\.android\avd\Pixel_3_API_27.avd" />
-+           </Key>
-+         </deviceKey>
-+       </Target>
-+     </targetSelectedWithDropDown>
-+-    <timeTargetWasSelectedWithDropDown value="2021-12-20T17:50:43.965935700Z" />
-++    <timeTargetWasSelectedWithDropDown value="2021-12-26T02:10:29.711791600Z" />
-+   </component>
-+ </project>
-+\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM__Default_Changelist_.xml	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]" date="1640603683316" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_11_12_AM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 11:12 AM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM__Default_Changelist_.xml	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
+++ /dev/null	(revision 58133ef53033e0643a17f1f4078750cf79ef5b84)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]" date="1640617599712" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_27_2021_3_06_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/27/2021 3:06 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: app/src/main/java/com/singularity/ipcaplus/Alerts.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/singularity/ipcaplus/Alerts.kt b/app/src/main/java/com/singularity/ipcaplus/Alerts.kt
new file mode 100644
--- /dev/null	(date 1641230309317)
+++ b/app/src/main/java/com/singularity/ipcaplus/Alerts.kt	(date 1641230309317)
@@ -0,0 +1,32 @@
+package com.singularity.ipcaplus
+
+import android.app.Activity
+import android.view.Gravity
+import android.view.View
+import android.widget.Button
+import android.widget.TextView
+import androidx.appcompat.app.AlertDialog
+import kotlinx.coroutines.*
+
+fun alertNotificatio(context: Activity, message: String) : AlertDialog {
+
+    val dialogView: View = context.layoutInflater.inflate(R.layout.alert_discard, null)
+
+    val builder = AlertDialog.Builder(context)
+    builder.setCancelable(false)
+    builder.setView(dialogView)
+    val alertDialog = builder.create()
+
+    alertDialog.window?.setGravity(Gravity.CENTER)
+    alertDialog.window?.setBackgroundDrawableResource(android.R.color.transparent)
+    val textViewTitle = dialogView.findViewById<TextView>(R.id.textViewAlertMessage)
+    textViewTitle.text = message
+
+    alertDialog.show()
+
+    GlobalScope.launch (Dispatchers.Main){
+        delay(2000)
+        alertDialog.dismiss()
+    }
+    return alertDialog
+}
\ No newline at end of file
