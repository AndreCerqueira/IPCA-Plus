Index: app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.FirebaseUser\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAES\r\nimport com.singularity.ipcaplus.cryptography.encrypt\r\nimport com.singularity.ipcaplus.databinding.ActivityRegisterBinding\r\n\r\nclass RegisterActivity : AppCompatActivity() {\r\n    private lateinit var auth: FirebaseAuth\r\n    private lateinit var binding: ActivityRegisterBinding\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_login)\r\n\r\n        binding = ActivityRegisterBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        auth = Firebase.auth\r\n\r\n\r\n        binding.buttonRegister.setOnClickListener {\r\n            val email : String = binding.editTextEmail.text.toString()\r\n            val password : String = binding.editTextTextPassword.text.toString()\r\n\r\n\r\n            auth.createUserWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(this) { task ->\r\n                    if (task.isSuccessful) {\r\n                        // Sign in success, update UI with the signed-in user's information\r\n                        Log.d(TAG, \"createUserWithEmail:success\")\r\n                        val user = auth.currentUser\r\n                        emailVerification()\r\n                        startActivity(Intent(this, LoginActivity::class.java ))\r\n                    } else {\r\n                        // If sign in fails, display a message to the user.\r\n                        Log.w(TAG, \"createUserWithEmail:failure\", task.exception)\r\n                        Toast.makeText(baseContext, \"Authentication failed.\",\r\n                            Toast.LENGTH_SHORT).show()\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    private fun emailVerification() {\r\n\r\n        auth.currentUser?.sendEmailVerification()\r\n            ?.addOnCompleteListener { task ->\r\n                if (task.isSuccessful) {\r\n                    // below message changed and user is navigated to Sign In activity\r\n                    val user = auth.currentUser\r\n                    Toast.makeText(\r\n                        this, \"Sign Up successful. Verification link sent to the Email address\",\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }\r\n            }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt b/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt
--- a/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt	(revision 259ef520c64e84cee5b29ce2aa11b4d2c88df187)
+++ b/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt	(date 1640617365737)
@@ -1,17 +1,15 @@
 package com.singularity.ipcaplus
 
-import android.content.ContentValues.TAG
+import android.content.ContentValues
 import android.content.Intent
-import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
 import android.util.Log
 import android.widget.Toast
+import androidx.appcompat.app.AppCompatActivity
+import com.google.android.material.snackbar.Snackbar
 import com.google.firebase.auth.FirebaseAuth
-import com.google.firebase.auth.FirebaseUser
 import com.google.firebase.auth.ktx.auth
 import com.google.firebase.ktx.Firebase
-import com.singularity.ipcaplus.cryptography.decryptWithAES
-import com.singularity.ipcaplus.cryptography.encrypt
 import com.singularity.ipcaplus.databinding.ActivityRegisterBinding
 
 class RegisterActivity : AppCompatActivity() {
@@ -33,22 +31,27 @@
             val email : String = binding.editTextEmail.text.toString()
             val password : String = binding.editTextTextPassword.text.toString()
 
-
-            auth.createUserWithEmailAndPassword(email, password)
-                .addOnCompleteListener(this) { task ->
-                    if (task.isSuccessful) {
-                        // Sign in success, update UI with the signed-in user's information
-                        Log.d(TAG, "createUserWithEmail:success")
-                        val user = auth.currentUser
-                        emailVerification()
-                        startActivity(Intent(this, LoginActivity::class.java ))
-                    } else {
-                        // If sign in fails, display a message to the user.
-                        Log.w(TAG, "createUserWithEmail:failure", task.exception)
-                        Toast.makeText(baseContext, "Authentication failed.",
-                            Toast.LENGTH_SHORT).show()
+            val emailDomain = Utilis.getEmailDomain(email)
+            if(emailDomain != "alunos.ipca.pt" && emailDomain != "ipca.pt"){
+                Snackbar.make(binding.root,
+                    "You need to Sign Up with (ipca.pt) email!", Snackbar.LENGTH_SHORT).show()
+            }else{
+                auth.createUserWithEmailAndPassword(email, password)
+                    .addOnCompleteListener(this) { task ->
+                        if (task.isSuccessful) {
+                            // Sign in success, update UI with the signed-in user's information
+                            Log.d(ContentValues.TAG, "createUserWithEmail:success")
+                            val user = auth.currentUser
+                            emailVerification()
+                            startActivity(Intent(this, LoginActivity::class.java ))
+                        } else {
+                            // If sign in fails, display a message to the user.
+                            Log.w(ContentValues.TAG, "createUserWithEmail:failure", task.exception)
+                            Toast.makeText(baseContext, "Authentication failed.",
+                                Toast.LENGTH_SHORT).show()
+                        }
                     }
-                }
+            }
         }
     }
 
Index: app/src/main/java/com/singularity/ipcaplus/Backend.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.singularity.ipcaplus\r\n\r\nimport android.graphics.Color\r\nimport com.github.sundeepk.compactcalendarview.domain.Event\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.Query\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.models.*\r\n\r\nobject Backend {\r\n\r\n    val db = Firebase.firestore\r\n\r\n    /*\r\n       ------------------------------------------------ Events ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all events during the month in the firebase to an list\r\n       @month = selected month\r\n       @callBack = return the list\r\n    */\r\n    fun getAllMonthEvents(month: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        // Get all user chat ids\r\n        val chatIds = arrayListOf<String>()\r\n        getAllUserChatIds {\r\n            chatIds.addAll(it)\r\n\r\n            // Search in all chats\r\n            for (id in chatIds) {\r\n                db.collection(\"chat\")\r\n                    .document(id)\r\n                    .collection(\"event\")\r\n                    .addSnapshotListener { documents, _ ->\r\n\r\n                        documents?.let {\r\n\r\n                            for (document in documents) {\r\n                                val event = EventCalendar.fromHash(document)\r\n                                event.id = document.id\r\n\r\n                                val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                                if (month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                                    events.add(event)\r\n                                }\r\n                            }\r\n                            callBack(events)\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun getAllUserChatIds(callBack: (List<String>)->Unit) {\r\n\r\n        val chatIds = arrayListOf<String>()\r\n\r\n        // Get Group Chats Ids\r\n        db.collection(\"profile\").document(Firebase.auth.currentUser!!.uid).collection(\"chat\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        chatIds.add(document.id)\r\n                    }\r\n\r\n                    callBack(chatIds)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the month in the firebase to an list\r\n       @month = selected month\r\n       @callBack = return the list\r\n    */\r\n    fun getAllChatMonthEvents(month: String, chat_id: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chat_id)\r\n            .collection(\"event\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val event = EventCalendar.fromHash(document)\r\n                        event.id = document.id\r\n\r\n                        val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                        if (month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                            events.add(event)\r\n                        }\r\n                    }\r\n\r\n                    callBack(events)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the day in the firebase to an list\r\n       @day = selected day\r\n       @callBack = return the list\r\n    */\r\n    fun getAllChatMonthDayEvents(month: String, day: Int, chat_id: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chat_id)\r\n            .collection(\"event\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val event = EventCalendar.fromHash(document)\r\n                        event.id = document.id\r\n\r\n                        val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                        if (day == Utilis.getDay(date).toInt() && month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                            events.add(event)\r\n                        }\r\n                    }\r\n\r\n                    callBack(events)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the day in the firebase to an list\r\n       @day = selected day\r\n       @callBack = return the list\r\n    */\r\n    fun getAllMonthDayEvents(month: String, day: Int, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        // Get all user chat ids\r\n        val chatIds = arrayListOf<String>()\r\n        getAllUserChatIds {\r\n            chatIds.addAll(it)\r\n\r\n            // Search in all chats\r\n            for (id in chatIds) {\r\n                db.collection(\"chat\")\r\n                    .document(id)\r\n                    .collection(\"event\")\r\n                    .addSnapshotListener { documents, _ ->\r\n\r\n                        documents?.let {\r\n\r\n                            for (document in documents) {\r\n                                val event = EventCalendar.fromHash(document)\r\n                                event.id = document.id\r\n\r\n                                val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                                if (day == Utilis.getDay(date).toInt() && month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                                    events.add(event)\r\n                                }\r\n                            }\r\n\r\n                            callBack(events)\r\n                        }\r\n\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun deleteEvent(chatID: String, eventID: String) {\r\n\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"event\")\r\n            .document(eventID)\r\n            .delete()\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Schedule ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all events in the firebase to an list\r\n       @callBack = return the list\r\n    */\r\n    fun getDayCourseSubjects(day: String, courseId: String, callBack: (List<Subject>)->Unit) {\r\n\r\n        val subjects = arrayListOf<Subject>()\r\n        val subjectsWithBreaks = arrayListOf<Subject>()\r\n\r\n        db.collection(\"course\").document(courseId).collection(\"subject\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n\r\n                    // Add every subject to the list\r\n                    for (document in documents) {\r\n                        val subject = Subject.fromHash(document)\r\n                        if (day == subject.day) {\r\n                            subjects.add(subject)\r\n                        }\r\n                    }\r\n\r\n                    // Order the subjects by time\r\n                    for (i in 0 until subjects.size) {\r\n                        for (j in 0 until subjects.size - 1) {\r\n\r\n                            if (Utilis.convertHoursStringToInt(subjects[j].start_time) > Utilis.convertHoursStringToInt(subjects[j+1].start_time)) {\r\n                                val temp = subjects[j]\r\n                                subjects[j] = subjects[j + 1]\r\n                                subjects[j + 1] = temp\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Add Break Times Between Classes\r\n                    for (i in 0 until subjects.size) {\r\n                        if (i % 2 == 0) {\r\n                            subjectsWithBreaks.add(subjects[i])\r\n                        }\r\n                        else {\r\n                            val diff = Utilis.convertHoursStringToInt(subjects[i].start_time) - Utilis.convertHoursStringToInt(subjects[i-1].end_time)\r\n                            subjectsWithBreaks.add(Subject(\"breaktime\", diff.toString()))\r\n                            subjectsWithBreaks.add(subjects[i])\r\n                        }\r\n                    }\r\n\r\n                    callBack(subjectsWithBreaks)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns the user course by callback\r\n       @id = user uid\r\n    */\r\n    fun getUserCourse(uid: String, callBack:(String)->Unit) {\r\n\r\n        db.collection(\"profile\")\r\n            .document(uid)\r\n            .collection(\"course\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    var courseId = \"\"\r\n                    for (document in documents)\r\n                        courseId = document.id\r\n\r\n                    callBack(courseId)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Contacts ------------------------------------------------\r\n    */\r\n    /*\r\n       This function returns all contacts in the firebase to an list\r\n       @callBack = return the list\r\n    */\r\n    fun getAllContacts(callBack: (List<Contact>)->Unit) {\r\n\r\n        val contacts = arrayListOf<Contact>()\r\n\r\n        db.collection(\"contacts\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val contact = Contact.fromHash(document)\r\n                        contacts.add(contact)\r\n                    }\r\n\r\n                    callBack(contacts)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Chats ------------------------------------------------\r\n    */\r\n    /*\r\n    /*\r\n       This function returns chats based on given type\r\n       @callBack = return the list\r\n    */\r\n    fun getChatByType(type: String ,callBack: (List<Chat>, List<String>)->Unit) {\r\n\r\n        val chats = arrayListOf<Chat>()\r\n        val chatIds = arrayListOf<String>()\r\n\r\n        db.collection(\"profile\").document(\"${Firebase.auth.currentUser!!.uid}\").collection(\"chat\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        val chat = Chat.fromHash(document)\r\n                        if (type == chat.type) {\r\n                            chats.add(chat)\r\n                            chatIds.add(document.id)\r\n                        }\r\n                    }\r\n\r\n                    callBack(chats, chatIds)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n    */\r\n\r\n    /*\r\n       This function returns last chat message by chat id\r\n       @callBack = return the list\r\n    */\r\n    fun getLastMessageByChatID(chatID: String, callBack: (Message?)->Unit) {\r\n\r\n        var message : Message? = null\r\n\r\n        db.collection(\"chat\").document(\"${chatID}\").collection(\"message\")\r\n            .orderBy(\"time\", Query.Direction.DESCENDING).limit(1)\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        message = Message.fromHash(document)\r\n                        }\r\n                    }\r\n\r\n                    callBack(message)\r\n                }\r\n\r\n    }\r\n\r\n\r\n    fun getChatAdminIds(chatID: String, callBack: (List<String>)->Unit) {\r\n\r\n        val adminIds = arrayListOf<String>()\r\n\r\n        // Get Group Chats Ids\r\n        db.collection(\"chat\").document(chatID).collection(\"admin\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        adminIds.add(document.id)\r\n                    }\r\n\r\n                    callBack(adminIds)\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/singularity/ipcaplus/Backend.kt b/app/src/main/java/com/singularity/ipcaplus/Backend.kt
--- a/app/src/main/java/com/singularity/ipcaplus/Backend.kt	(revision 259ef520c64e84cee5b29ce2aa11b4d2c88df187)
+++ b/app/src/main/java/com/singularity/ipcaplus/Backend.kt	(date 1640617597444)
@@ -1,12 +1,13 @@
 package com.singularity.ipcaplus
 
-import android.graphics.Color
-import com.github.sundeepk.compactcalendarview.domain.Event
 import com.google.firebase.auth.ktx.auth
 import com.google.firebase.firestore.Query
 import com.google.firebase.firestore.ktx.firestore
 import com.google.firebase.ktx.Firebase
-import com.singularity.ipcaplus.models.*
+import com.singularity.ipcaplus.models.Contact
+import com.singularity.ipcaplus.models.EventCalendar
+import com.singularity.ipcaplus.models.Message
+import com.singularity.ipcaplus.models.Subject
 
 object Backend {
 
@@ -375,5 +376,27 @@
 
     }
 
+    /*
+       ------------------------------------------------ Register Manipulation ------------------------------------------------
+    */
+
+    fun getIpcaData(email: String, callBack: (Message?)->Unit) {
+
+        var message : Message? = null
+
+        db.collection("ipca_data")
+            .addSnapshotListener { documents, _ ->
+                documents?.let {
+                    for (document in documents) {
+                        message = Message.fromHash(document)
+                    }
+                }
+
+                callBack(message)
+            }
+
+    }
+
+
 
 }
\ No newline at end of file
Index: app/src/main/java/com/singularity/ipcaplus/Utilis.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport androidx.annotation.RequiresApi\r\nimport java.io.IOException\r\nimport java.text.SimpleDateFormat\r\nimport java.time.LocalDate\r\nimport java.util.*\r\nimport java.util.regex.Pattern\r\n\r\nobject  Utilis {\r\n\r\n    /*\r\n        This function return the current month id\r\n     */\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getCurrentMonthId(): Int {\r\n\r\n        val c = LocalDate.now()\r\n        val strArray = Pattern.compile(\"-\").split(c.toString())\r\n\r\n        return strArray[1].toInt()\r\n    }\r\n\r\n    /*\r\n        This function return the current year id\r\n     */\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getCurrentYear(): String {\r\n\r\n        val c = LocalDate.now()\r\n        val strArray = Pattern.compile(\"-\").split(c.toString())\r\n\r\n        return strArray[0]\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getYearByCalendarId(id: Int): Int {\r\n\r\n        var count = id\r\n        var result = 2021 - 121\r\n\r\n        while (count > 0) {\r\n            count -= 1\r\n            result ++\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    /*\r\n        This function return the month value in string by an id\r\n        @month = month id\r\n     */\r\n    fun getMonthById(month: Int): String {\r\n        return when (month) {\r\n            1 -> \"Janeiro\"\r\n            2 -> \"Fevereiro\"\r\n            3 -> \"Março\"\r\n            4 -> \"Abril\"\r\n            5 -> \"Maio\"\r\n            6 -> \"Junho\"\r\n            7 -> \"Julho\"\r\n            8 -> \"Agosto\"\r\n            9 -> \"Setembro\"\r\n            10 -> \"Outubro\"\r\n            11 -> \"Novembro\"\r\n            12 -> \"Dezembro\"\r\n            else -> \"None\"\r\n        }\r\n    }\r\n\r\n    fun convertHoursStringToInt(strVal: String): Int {\r\n        val strArray = Pattern.compile(\":\").split(strVal)\r\n        val result = strArray[0] + strArray[1]\r\n        return result.toInt()\r\n    }\r\n\r\n    fun getDate(milliSeconds: Long, dateFormat: String?): String {\r\n        // Create a DateFormatter object for displaying date in specified format.\r\n        val formatter = SimpleDateFormat(dateFormat)\r\n\r\n        // Create a calendar object that will convert the date and time value in milliseconds to date.\r\n        val calendar: Calendar = Calendar.getInstance()\r\n        calendar.timeInMillis = milliSeconds\r\n        return formatter.format(calendar.time)\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the day\r\n        @date = default date\r\n     */\r\n    fun getDay(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\"T\").split(strArray[2])\r\n\r\n        return strArray2[0]\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the month in text\r\n        @date = default date\r\n     */\r\n    fun getMonth(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n\r\n        return strArray[1].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the year in text\r\n        @date = default date\r\n     */\r\n    fun getYear(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n\r\n        return strArray[0].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the Hours in text\r\n        @date = default date\r\n     */\r\n    fun getHours(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"T\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\":\").split(strArray[1])\r\n\r\n        return strArray2[0].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the Minutes in text\r\n        @date = default date\r\n     */\r\n    fun getMinutes(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"T\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\":\").split(strArray[1])\r\n\r\n        return strArray2[1].toString()\r\n    }\r\n\r\n\r\n    fun getJsonDataFromAsset(context: Context, fileName: String): String? {\r\n        val jsonString: String\r\n        try {\r\n            jsonString = context.assets.open(fileName).bufferedReader().use { it.readText() }\r\n        } catch (ioException: IOException) {\r\n            ioException.printStackTrace()\r\n            return null\r\n        }\r\n        return jsonString\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/singularity/ipcaplus/Utilis.kt b/app/src/main/java/com/singularity/ipcaplus/Utilis.kt
--- a/app/src/main/java/com/singularity/ipcaplus/Utilis.kt	(revision 259ef520c64e84cee5b29ce2aa11b4d2c88df187)
+++ b/app/src/main/java/com/singularity/ipcaplus/Utilis.kt	(date 1640616340275)
@@ -155,6 +155,9 @@
         return strArray2[1].toString()
     }
 
+    /*
+        This function get the buffer with the name of filename on assets folder
+     */
 
     fun getJsonDataFromAsset(context: Context, fileName: String): String? {
         val jsonString: String
@@ -167,4 +170,16 @@
         return jsonString
     }
 
+    /*
+        This function gets the domain of email
+        split remove the @ and make the array like this -> [a20115][alunos.ipca.pt]
+     */
+    fun getEmailDomain(email: String) : String{
+        val strArray = Pattern.compile("@").split(email)
+        val result= strArray[1]
+
+        return result.toString()
+
+    }
+
 }
\ No newline at end of file
